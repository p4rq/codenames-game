{"ast":null,"code":"import React,{useState,useContext,useEffect}from'react';import{Link,useLocation,useParams}from'react-router-dom';import{UserContext}from'../../context/UserContext';import{GameContext}from'../../context/GameContext';import'./style.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Navbar=_ref=>{let{darkMode,toggleDarkMode}=_ref;const location=useLocation();const params=useParams();const{user,updateUsername}=useContext(UserContext);const{game,changeTeam}=useContext(GameContext);const[showSettings,setShowSettings]=useState(false);const[newUsername,setNewUsername]=useState('');// Force re-render when user changes\nconst[currentTeam,setCurrentTeam]=useState('');// Get the gameId from the URL if we're on a game page\nconst gameId=params.gameId||(location.pathname.startsWith('/game/')?location.pathname.split('/')[2]:null);// Update username form when user changes\nuseEffect(()=>{if(user!==null&&user!==void 0&&user.username){setNewUsername(user.username);}},[user===null||user===void 0?void 0:user.username]);// Update current team whenever user or game changes\nuseEffect(()=>{const team=getCurrentTeam();console.log(\"Navbar - Current team detected:\",team);setCurrentTeam(team);},[user,game,location.pathname]);// Debug - log user and team info\nuseEffect(()=>{console.log(\"Navbar - User updated:\",user);console.log(\"Navbar - Current team displayed:\",currentTeam);console.log(\"Navbar - Game ID from URL:\",gameId);},[user,currentTeam,gameId]);const handleUsernameChange=e=>{e.preventDefault();if(newUsername.trim()){updateUsername(newUsername.trim());setShowSettings(false);}};const handleTeamChange=async team=>{if(gameId&&user){console.log(`Attempting to change team to ${team} for user ${user.id} in game ${gameId}`);// Force update the current team in local state BEFORE the API call\nsetCurrentTeam(team);// If you have a way to directly update the user context, do it here:\n// Example (assuming updateUser is available from UserContext):\n// updateUser({ ...user, team: team });\nawait changeTeam(gameId,user.id,team);setShowSettings(false);// Force another team update after API call to be doubly sure\nsetTimeout(()=>{const freshTeam=getCurrentTeam();console.log(\"Post-API team check:\",freshTeam);setCurrentTeam(freshTeam);},100);}else{console.log(\"Can't change team - missing gameId or user:\",{gameId,userId:user===null||user===void 0?void 0:user.id});}};// Get current team from different sources\nconst getCurrentTeam=()=>{// Try to get user's team directly from user object first\nif(user!==null&&user!==void 0&&user.team){console.log(\"Team found in user object:\",user.team);return user.team;}// If not found there, try to find the player in the current game\nif(game!==null&&game!==void 0&&game.players&&user!==null&&user!==void 0&&user.id){const player=game.players.find(p=>p.id===user.id);if(player!==null&&player!==void 0&&player.team){console.log(\"Team found in game players:\",player.team);return player.team;}}// Check localStorage as a last resort\ntry{const savedUser=JSON.parse(localStorage.getItem('user'));if(savedUser!==null&&savedUser!==void 0&&savedUser.team){console.log(\"Team found in localStorage:\",savedUser.team);return savedUser.team;}}catch(e){console.error(\"Error reading from localStorage:\",e);}// Default fallback\nreturn'';};// Get display name for team\nconst getTeamDisplay=()=>{if(!currentTeam)return'Observer';if(currentTeam==='observer')return'Observer';return currentTeam.charAt(0).toUpperCase()+currentTeam.slice(1);};return/*#__PURE__*/_jsx(\"nav\",{className:`navbar ${darkMode?'dark':''}`,children:/*#__PURE__*/_jsxs(\"div\",{className:\"navbar-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"navbar-brand\",children:/*#__PURE__*/_jsx(Link,{to:\"/\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Codenames\"})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"navbar-actions\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"theme-toggle\",onClick:toggleDarkMode,\"aria-label\":darkMode?'Switch to light mode':'Switch to dark mode',children:darkMode?'☀️':'🌙'}),user&&/*#__PURE__*/_jsxs(\"div\",{className:\"user-menu\",children:[/*#__PURE__*/_jsxs(\"button\",{className:`user-menu-button ${currentTeam?`${currentTeam}-user`:''}`,onClick:()=>setShowSettings(!showSettings),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"user-info\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"username\",children:user.username}),/*#__PURE__*/_jsx(\"span\",{className:\"team-label\",children:getTeamDisplay()})]}),/*#__PURE__*/_jsx(\"span\",{className:\"dropdown-icon\",children:\"\\u25BC\"})]}),showSettings&&/*#__PURE__*/_jsxs(\"div\",{className:\"settings-dropdown\",children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleUsernameChange,className:\"settings-form\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"username\",children:\"Change Name\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-group\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"username\",value:newUsername,onChange:e=>setNewUsername(e.target.value),placeholder:\"New username\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Save\"})]})]}),gameId&&/*#__PURE__*/_jsxs(\"div\",{className:\"team-selection\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Change Team\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"team-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:`team-btn red ${currentTeam==='red'?'active':''}`,onClick:()=>handleTeamChange('red'),children:\"Red Team\"}),/*#__PURE__*/_jsx(\"button\",{className:`team-btn blue ${currentTeam==='blue'?'active':''}`,onClick:()=>handleTeamChange('blue'),children:\"Blue Team\"})]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"close-settings\",onClick:()=>setShowSettings(false),children:\"Close\"})]})]})]})]})});};export default Navbar;","map":{"version":3,"names":["React","useState","useContext","useEffect","Link","useLocation","useParams","UserContext","GameContext","jsx","_jsx","jsxs","_jsxs","Navbar","_ref","darkMode","toggleDarkMode","location","params","user","updateUsername","game","changeTeam","showSettings","setShowSettings","newUsername","setNewUsername","currentTeam","setCurrentTeam","gameId","pathname","startsWith","split","username","team","getCurrentTeam","console","log","handleUsernameChange","e","preventDefault","trim","handleTeamChange","id","setTimeout","freshTeam","userId","players","player","find","p","savedUser","JSON","parse","localStorage","getItem","error","getTeamDisplay","charAt","toUpperCase","slice","className","children","to","onClick","onSubmit","htmlFor","type","value","onChange","target","placeholder"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/components/Navbar/index.jsx"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport { Link, useLocation, useParams } from 'react-router-dom';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport { GameContext } from '../../context/GameContext';\r\nimport './style.css';\r\n\r\nconst Navbar = ({ darkMode, toggleDarkMode }) => {\r\n  const location = useLocation();\r\n  const params = useParams();\r\n  const { user, updateUsername } = useContext(UserContext);\r\n  const { game, changeTeam } = useContext(GameContext);\r\n  \r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [newUsername, setNewUsername] = useState('');\r\n  // Force re-render when user changes\r\n  const [currentTeam, setCurrentTeam] = useState('');\r\n  \r\n  // Get the gameId from the URL if we're on a game page\r\n  const gameId = params.gameId || (location.pathname.startsWith('/game/') \r\n    ? location.pathname.split('/')[2] \r\n    : null);\r\n\r\n  // Update username form when user changes\r\n  useEffect(() => {\r\n    if (user?.username) {\r\n      setNewUsername(user.username);\r\n    }\r\n  }, [user?.username]);\r\n  \r\n  // Update current team whenever user or game changes\r\n  useEffect(() => {\r\n    const team = getCurrentTeam();\r\n    console.log(\"Navbar - Current team detected:\", team);\r\n    setCurrentTeam(team);\r\n  }, [user, game, location.pathname]);\r\n  \r\n  // Debug - log user and team info\r\n  useEffect(() => {\r\n    console.log(\"Navbar - User updated:\", user);\r\n    console.log(\"Navbar - Current team displayed:\", currentTeam);\r\n    console.log(\"Navbar - Game ID from URL:\", gameId);\r\n  }, [user, currentTeam, gameId]);\r\n  \r\n  const handleUsernameChange = (e) => {\r\n    e.preventDefault();\r\n    if (newUsername.trim()) {\r\n      updateUsername(newUsername.trim());\r\n      setShowSettings(false);\r\n    }\r\n  };\r\n  \r\n  const handleTeamChange = async (team) => {\r\n    if (gameId && user) {\r\n      console.log(`Attempting to change team to ${team} for user ${user.id} in game ${gameId}`);\r\n      \r\n      // Force update the current team in local state BEFORE the API call\r\n      setCurrentTeam(team);\r\n      \r\n      // If you have a way to directly update the user context, do it here:\r\n      // Example (assuming updateUser is available from UserContext):\r\n      // updateUser({ ...user, team: team });\r\n      \r\n      await changeTeam(gameId, user.id, team);\r\n      setShowSettings(false);\r\n      \r\n      // Force another team update after API call to be doubly sure\r\n      setTimeout(() => {\r\n        const freshTeam = getCurrentTeam();\r\n        console.log(\"Post-API team check:\", freshTeam);\r\n        setCurrentTeam(freshTeam);\r\n      }, 100);\r\n    } else {\r\n      console.log(\"Can't change team - missing gameId or user:\", { gameId, userId: user?.id });\r\n    }\r\n  };\r\n  \r\n  // Get current team from different sources\r\n  const getCurrentTeam = () => {\r\n    // Try to get user's team directly from user object first\r\n    if (user?.team) {\r\n      console.log(\"Team found in user object:\", user.team);\r\n      return user.team;\r\n    }\r\n    \r\n    // If not found there, try to find the player in the current game\r\n    if (game?.players && user?.id) {\r\n      const player = game.players.find(p => p.id === user.id);\r\n      if (player?.team) {\r\n        console.log(\"Team found in game players:\", player.team);\r\n        return player.team;\r\n      }\r\n    }\r\n    \r\n    // Check localStorage as a last resort\r\n    try {\r\n      const savedUser = JSON.parse(localStorage.getItem('user'));\r\n      if (savedUser?.team) {\r\n        console.log(\"Team found in localStorage:\", savedUser.team);\r\n        return savedUser.team;\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Error reading from localStorage:\", e);\r\n    }\r\n    \r\n    // Default fallback\r\n    return '';\r\n  };\r\n  \r\n  // Get display name for team\r\n  const getTeamDisplay = () => {\r\n    if (!currentTeam) return 'Observer';\r\n    if (currentTeam === 'observer') return 'Observer';\r\n    return currentTeam.charAt(0).toUpperCase() + currentTeam.slice(1);\r\n  };\r\n  \r\n  return (\r\n    <nav className={`navbar ${darkMode ? 'dark' : ''}`}>\r\n      <div className=\"navbar-content\">\r\n        <div className=\"navbar-brand\">\r\n          <Link to=\"/\">\r\n            <h1>Codenames</h1>\r\n          </Link>\r\n        </div>\r\n        \r\n        <div className=\"navbar-actions\">\r\n          <button \r\n            className=\"theme-toggle\" \r\n            onClick={toggleDarkMode} \r\n            aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}\r\n          >\r\n            {darkMode ? '☀️' : '🌙'}\r\n          </button>\r\n          \r\n          {user && (\r\n            <div className=\"user-menu\">\r\n              <button \r\n                className={`user-menu-button ${currentTeam ? `${currentTeam}-user` : ''}`}\r\n                onClick={() => setShowSettings(!showSettings)}\r\n              >\r\n                <div className=\"user-info\">\r\n                  <span className=\"username\">{user.username}</span>\r\n                  <span className=\"team-label\">{getTeamDisplay()}</span>\r\n                </div>\r\n                <span className=\"dropdown-icon\">▼</span>\r\n              </button>\r\n              \r\n              {showSettings && (\r\n                <div className=\"settings-dropdown\">\r\n                  {/* Change username */}\r\n                  <form onSubmit={handleUsernameChange} className=\"settings-form\">\r\n                    <label htmlFor=\"username\">Change Name</label>\r\n                    <div className=\"input-group\">\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"username\"\r\n                        value={newUsername}\r\n                        onChange={(e) => setNewUsername(e.target.value)}\r\n                        placeholder=\"New username\"\r\n                      />\r\n                      <button type=\"submit\">Save</button>\r\n                    </div>\r\n                  </form>\r\n                  \r\n                  {/* Change team - only show if in a game */}\r\n                  {gameId && (\r\n                    <div className=\"team-selection\">\r\n                      <label>Change Team</label>\r\n                      <div className=\"team-buttons\">\r\n                        <button \r\n                          className={`team-btn red ${currentTeam === 'red' ? 'active' : ''}`}\r\n                          onClick={() => handleTeamChange('red')}\r\n                        >\r\n                          Red Team\r\n                        </button>\r\n                        <button \r\n                          className={`team-btn blue ${currentTeam === 'blue' ? 'active' : ''}`}\r\n                          onClick={() => handleTeamChange('blue')}\r\n                        >\r\n                          Blue Team\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                  \r\n                  <button \r\n                    className=\"close-settings\"\r\n                    onClick={() => setShowSettings(false)}\r\n                  >\r\n                    Close\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}