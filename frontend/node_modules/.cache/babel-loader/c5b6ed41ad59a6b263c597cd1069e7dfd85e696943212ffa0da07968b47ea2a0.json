{"ast":null,"code":"import api from'./api';/**\r\n * Sends a chat message\r\n * @param {string} content - Message content\r\n * @param {string} senderId - User ID\r\n * @param {string} username - Username\r\n * @param {string} gameId - Game ID for chat\r\n * @param {string} [team=null] - Team (optional)\r\n * @returns {Promise<any>} - Response data\r\n */export const sendMessage=async function(content,senderId,username,gameId){let team=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;try{const endpoint=`/games/${gameId}/messages`;const payload={content,sender_id:senderId,username,team};const response=await api.post(endpoint,payload);return response.data;}catch(error){console.error('Error sending message:',error);throw error;}};/**\r\n * Gets all messages for a chat\r\n * @param {string} gameId - Game ID for chat\r\n * @param {string} [team=null] - Team (optional)\r\n * @returns {Promise<any>} - Chat messages\r\n */export const getMessages=async function(gameId){let team=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const endpoint=team?`/games/${gameId}/messages?team=${team}`:`/games/${gameId}/messages`;const response=await api.get(endpoint);return response.data;}catch(error){console.error('Error fetching messages:',error);throw error;}};","map":{"version":3,"names":["api","sendMessage","content","senderId","username","gameId","team","arguments","length","undefined","endpoint","payload","sender_id","response","post","data","error","console","getMessages","get"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/services/chatService.js"],"sourcesContent":["import api from './api';\r\n\r\n/**\r\n * Sends a chat message\r\n * @param {string} content - Message content\r\n * @param {string} senderId - User ID\r\n * @param {string} username - Username\r\n * @param {string} gameId - Game ID for chat\r\n * @param {string} [team=null] - Team (optional)\r\n * @returns {Promise<any>} - Response data\r\n */\r\nexport const sendMessage = async (content, senderId, username, gameId, team = null) => {\r\n  try {\r\n    const endpoint = `/games/${gameId}/messages`;\r\n    const payload = {\r\n      content,\r\n      sender_id: senderId,\r\n      username,\r\n      team,\r\n    };\r\n    \r\n    const response = await api.post(endpoint, payload);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error sending message:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Gets all messages for a chat\r\n * @param {string} gameId - Game ID for chat\r\n * @param {string} [team=null] - Team (optional)\r\n * @returns {Promise<any>} - Chat messages\r\n */\r\nexport const getMessages = async (gameId, team = null) => {\r\n  try {\r\n    const endpoint = team \r\n      ? `/games/${gameId}/messages?team=${team}` \r\n      : `/games/${gameId}/messages`;\r\n    \r\n    const response = await api.get(endpoint);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching messages:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,WAAW,CAAG,cAAAA,CAAOC,OAAO,CAAEC,QAAQ,CAAEC,QAAQ,CAAEC,MAAM,CAAkB,IAAhB,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CAChF,GAAI,CACF,KAAM,CAAAG,QAAQ,CAAG,UAAUL,MAAM,WAAW,CAC5C,KAAM,CAAAM,OAAO,CAAG,CACdT,OAAO,CACPU,SAAS,CAAET,QAAQ,CACnBC,QAAQ,CACRE,IACF,CAAC,CAED,KAAM,CAAAO,QAAQ,CAAG,KAAM,CAAAb,GAAG,CAACc,IAAI,CAACJ,QAAQ,CAAEC,OAAO,CAAC,CAClD,MAAO,CAAAE,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,WAAW,CAAG,cAAAA,CAAOb,MAAM,CAAkB,IAAhB,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACnD,GAAI,CACF,KAAM,CAAAG,QAAQ,CAAGJ,IAAI,CACjB,UAAUD,MAAM,kBAAkBC,IAAI,EAAE,CACxC,UAAUD,MAAM,WAAW,CAE/B,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAb,GAAG,CAACmB,GAAG,CAACT,QAAQ,CAAC,CACxC,MAAO,CAAAG,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}