{"ast":null,"code":"import React,{useState,useEffect,useContext,useRef}from'react';import{UserContext}from'../../context/UserContext';import{GameContext}from'../../context/GameContext';import{getMessages,sendMessage}from'../../services/chatService';import'./Chat.css';// Add wsConnected as a prop\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const Chat=_ref=>{let{gameId,team,wsConnected}=_ref;const{user}=useContext(UserContext);const{game,setGame}=useContext(GameContext);// Get setGame from GameContext\nconst[messages,setMessages]=useState([]);const[newMessage,setNewMessage]=useState('');const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const messagesEndRef=useRef(null);const[socket,setSocket]=useState(null);const[isConnected,setIsConnected]=useState(false);// Debug log to see the user and team values\nuseEffect(()=>{console.log(\"Chat component user:\",user);console.log(\"Chat component team:\",team);},[user,team]);// TEMPORARY: Force team access for debugging\nuseEffect(()=>{if(user&&!user.team){console.log(\"TEMPORARY: Forcing user team for debug\");localStorage.setItem('user',JSON.stringify({...user,team:'red'}));}},[user]);// Fetch messages on mount and periodically\nuseEffect(()=>{if(!gameId)return;const fetchMessages=async()=>{try{const data=await getMessages(gameId,team);setMessages(data||[]);setError(null);}catch(err){console.error('Failed to load messages:',err);setError('Failed to load messages');}};// Initial fetch\nfetchMessages();// Set up polling\nconst interval=setInterval(fetchMessages,3000);return()=>clearInterval(interval);},[gameId,team]);// Scroll to bottom when messages update\nuseEffect(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});},[messages]);const handleSendMessage=async e=>{e.preventDefault();if(!newMessage.trim()||!user||!gameId)return;setLoading(true);try{await sendMessage(newMessage,user.id,user.username,gameId,team);setNewMessage('');// Fetch updated messages\nconst data=await getMessages(gameId,team);setMessages(data||[]);}catch(err){setError('Failed to send message');console.error(err);}finally{setLoading(false);}};// Update the canAccessChat function\nconst canAccessChat=()=>{// Debug logging\nconsole.log(\"canAccessChat check:\",{user,userTeam:user===null||user===void 0?void 0:user.team,chatTeam:team,role:user===null||user===void 0?void 0:user.role});if(!team){// Everyone can access the general chat\nreturn true;}if(!user){// No user means no access to team chats\nreturn false;}// If user doesn't have a team directly, check for team in game players\nlet userTeam=user.team;if(!userTeam&&game&&game.players){// Find the user in the game's players\nconst playerInGame=game.players.find(p=>p.id===user.id);if(playerInGame){userTeam=playerInGame.team;}}if(!userTeam){console.log(\"User has no team - denying access to team chat\");return false;}// Convert to lowercase for case-insensitive comparison\nconst normalizedUserTeam=userTeam.toLowerCase();const normalizedChatTeam=team.toLowerCase();// Spymasters can access all team chats\nif(user.role==='SPYMASTER'){return true;}// Users can only access their own team's chat\nconst hasAccess=normalizedUserTeam===normalizedChatTeam;console.log(`Team comparison: user=${normalizedUserTeam}, chat=${normalizedChatTeam}, access=${hasAccess}`);return hasAccess;};// Add this function to update game state\nconst updateGameState=gameData=>{if(gameData&&typeof setGame==='function'){setGame(gameData);}};// Update the connectWebSocket function with the correct WebSocket URL construction\nconst connectWebSocket=()=>{if(!gameId||!(user!==null&&user!==void 0&&user.id))return;// Use gameId prop directly, not game.id\n// Use player_id parameter as expected by your backend\nconst wsUrl=`ws://${window.location.host}/ws/game?game_id=${gameId}&player_id=${user.id}`;console.log(`Connecting to WebSocket at ${wsUrl}`);// Close any existing connection\nif(socket){console.log(\"Closing WebSocket connection\");socket.close();}// Create new connection\nconst newSocket=new WebSocket(wsUrl);newSocket.onopen=()=>{console.log(\"WebSocket connection established\");setIsConnected(true);};newSocket.onmessage=event=>{try{const data=JSON.parse(event.data);// Handle message based on type\nif(data.type==='chat'){setMessages(prev=>[...prev,data.message]);}else if(data.type==='game_update'){// Update game state using the new function\nupdateGameState(data.game);}}catch(err){console.error(\"Error parsing WebSocket message:\",err);}};newSocket.onclose=()=>{console.log(\"WebSocket connection closed\");setIsConnected(false);// Try to reconnect after a delay\nsetTimeout(()=>{console.log(\"Attempting to reconnect WebSocket...\");connectWebSocket();},3000);};newSocket.onerror=error=>{console.log(\"WebSocket error:\",error);};setSocket(newSocket);};// Add useEffect to connect WebSocket when component mounts or gameId/user changes\nuseEffect(()=>{if(gameId&&user!==null&&user!==void 0&&user.id){console.log(\"Initializing WebSocket connection\");connectWebSocket();// Clean up function to close socket when component unmounts\nreturn()=>{if(socket){console.log(\"Component unmounting, closing WebSocket\");socket.close();}};}},[gameId,user===null||user===void 0?void 0:user.id]);// Add socket as dependency if you want to reconnect when it changes\n// Add a connection indicator to your chat header\nreturn/*#__PURE__*/_jsxs(\"div\",{className:`chat-container ${team?`team-${team.toLowerCase()}`:''}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:team?`${team} Team Chat`:'Game Chat'}),/*#__PURE__*/_jsxs(\"div\",{className:\"connection-status\",children:[/*#__PURE__*/_jsx(\"span\",{className:`status-indicator ${wsConnected?'connected':'disconnected'}`}),/*#__PURE__*/_jsx(\"span\",{children:wsConnected?'Connected':'Disconnected'}),!wsConnected&&/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"reconnect-button\",onClick:connectWebSocket,children:\"Reconnect\"})]})]}),!canAccessChat()?/*#__PURE__*/_jsx(\"p\",{className:\"access-denied\",children:\"You don't have access to this team's chat\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"messages-container\",children:[messages.length===0?/*#__PURE__*/_jsx(\"p\",{className:\"no-messages\",children:\"No messages yet\"}):messages.map(msg=>/*#__PURE__*/_jsxs(\"div\",{className:`message ${msg.sender_id===(user===null||user===void 0?void 0:user.id)?'own-message':''}`,children:[/*#__PURE__*/_jsxs(\"span\",{className:\"message-username\",children:[msg.username,\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"message-content\",children:msg.content}),/*#__PURE__*/_jsx(\"span\",{className:\"message-time\",children:new Date(msg.timestamp).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'})})]},msg.id||`${msg.sender_id}-${msg.timestamp}`)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:error})]}),/*#__PURE__*/_jsxs(\"form\",{className:\"message-form\",onSubmit:handleSendMessage,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newMessage,onChange:e=>setNewMessage(e.target.value),placeholder:\"Type a message...\",disabled:loading||!user}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:loading||!newMessage.trim()||!user,children:\"Send\"})]})]})]});};export default Chat;","map":{"version":3,"names":["React","useState","useEffect","useContext","useRef","UserContext","GameContext","getMessages","sendMessage","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Chat","_ref","gameId","team","wsConnected","user","game","setGame","messages","setMessages","newMessage","setNewMessage","loading","setLoading","error","setError","messagesEndRef","socket","setSocket","isConnected","setIsConnected","console","log","localStorage","setItem","JSON","stringify","fetchMessages","data","err","interval","setInterval","clearInterval","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","trim","id","username","canAccessChat","userTeam","chatTeam","role","players","playerInGame","find","p","normalizedUserTeam","toLowerCase","normalizedChatTeam","hasAccess","updateGameState","gameData","connectWebSocket","wsUrl","window","location","host","close","newSocket","WebSocket","onopen","onmessage","event","parse","type","prev","message","onclose","setTimeout","onerror","className","children","onClick","length","map","msg","sender_id","content","Date","timestamp","toLocaleTimeString","hour","minute","ref","onSubmit","value","onChange","target","placeholder","disabled"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/components/Chat/index.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport { GameContext } from '../../context/GameContext';\r\nimport { getMessages, sendMessage } from '../../services/chatService';\r\nimport './Chat.css';\r\n\r\n// Add wsConnected as a prop\r\nconst Chat = ({ gameId, team, wsConnected }) => {\r\n  const { user } = useContext(UserContext);\r\n  const { game, setGame } = useContext(GameContext); // Get setGame from GameContext\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const messagesEndRef = useRef(null);\r\n  const [socket, setSocket] = useState(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  \r\n  // Debug log to see the user and team values\r\n  useEffect(() => {\r\n    console.log(\"Chat component user:\", user);\r\n    console.log(\"Chat component team:\", team);\r\n  }, [user, team]);\r\n  \r\n  // TEMPORARY: Force team access for debugging\r\n  useEffect(() => {\r\n    if (user && !user.team) {\r\n      console.log(\"TEMPORARY: Forcing user team for debug\");\r\n      localStorage.setItem('user', JSON.stringify({...user, team: 'red'}));\r\n    }\r\n  }, [user]);\r\n  \r\n  // Fetch messages on mount and periodically\r\n  useEffect(() => {\r\n    if (!gameId) return;\r\n    \r\n    const fetchMessages = async () => {\r\n      try {\r\n        const data = await getMessages(gameId, team);\r\n        setMessages(data || []);\r\n        setError(null);\r\n      } catch (err) {\r\n        console.error('Failed to load messages:', err);\r\n        setError('Failed to load messages');\r\n      }\r\n    };\r\n    \r\n    // Initial fetch\r\n    fetchMessages();\r\n    \r\n    // Set up polling\r\n    const interval = setInterval(fetchMessages, 3000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, [gameId, team]);\r\n  \r\n  // Scroll to bottom when messages update\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n  \r\n  const handleSendMessage = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!newMessage.trim() || !user || !gameId) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      await sendMessage(newMessage, user.id, user.username, gameId, team);\r\n      setNewMessage('');\r\n      \r\n      // Fetch updated messages\r\n      const data = await getMessages(gameId, team);\r\n      setMessages(data || []);\r\n    } catch (err) {\r\n      setError('Failed to send message');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update the canAccessChat function\r\n\r\n  const canAccessChat = () => {\r\n    // Debug logging\r\n    console.log(\"canAccessChat check:\", {\r\n      user,\r\n      userTeam: user?.team,\r\n      chatTeam: team,\r\n      role: user?.role\r\n    });\r\n    \r\n    if (!team) {\r\n      // Everyone can access the general chat\r\n      return true;\r\n    }\r\n    \r\n    if (!user) {\r\n      // No user means no access to team chats\r\n      return false;\r\n    }\r\n    \r\n    // If user doesn't have a team directly, check for team in game players\r\n    let userTeam = user.team;\r\n    if (!userTeam && game && game.players) {\r\n      // Find the user in the game's players\r\n      const playerInGame = game.players.find(p => p.id === user.id);\r\n      if (playerInGame) {\r\n        userTeam = playerInGame.team;\r\n      }\r\n    }\r\n    \r\n    if (!userTeam) {\r\n      console.log(\"User has no team - denying access to team chat\");\r\n      return false;\r\n    }\r\n    \r\n    // Convert to lowercase for case-insensitive comparison\r\n    const normalizedUserTeam = userTeam.toLowerCase();\r\n    const normalizedChatTeam = team.toLowerCase();\r\n    \r\n    // Spymasters can access all team chats\r\n    if (user.role === 'SPYMASTER') {\r\n      return true;\r\n    }\r\n    \r\n    // Users can only access their own team's chat\r\n    const hasAccess = normalizedUserTeam === normalizedChatTeam;\r\n    console.log(`Team comparison: user=${normalizedUserTeam}, chat=${normalizedChatTeam}, access=${hasAccess}`);\r\n    return hasAccess;\r\n  };\r\n\r\n  // Add this function to update game state\r\n  const updateGameState = (gameData) => {\r\n    if (gameData && typeof setGame === 'function') {\r\n      setGame(gameData);\r\n    }\r\n  };\r\n\r\n  // Update the connectWebSocket function with the correct WebSocket URL construction\r\n  const connectWebSocket = () => {\r\n    if (!gameId || !user?.id) return; // Use gameId prop directly, not game.id\r\n    \r\n    // Use player_id parameter as expected by your backend\r\n    const wsUrl = `ws://${window.location.host}/ws/game?game_id=${gameId}&player_id=${user.id}`;\r\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\r\n    \r\n    // Close any existing connection\r\n    if (socket) {\r\n      console.log(\"Closing WebSocket connection\");\r\n      socket.close();\r\n    }\r\n    \r\n    // Create new connection\r\n    const newSocket = new WebSocket(wsUrl);\r\n    \r\n    newSocket.onopen = () => {\r\n      console.log(\"WebSocket connection established\");\r\n      setIsConnected(true);\r\n    };\r\n    \r\n    newSocket.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        // Handle message based on type\r\n        if (data.type === 'chat') {\r\n          setMessages(prev => [...prev, data.message]);\r\n        } else if (data.type === 'game_update') {\r\n          // Update game state using the new function\r\n          updateGameState(data.game);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error parsing WebSocket message:\", err);\r\n      }\r\n    };\r\n    \r\n    newSocket.onclose = () => {\r\n      console.log(\"WebSocket connection closed\");\r\n      setIsConnected(false);\r\n      \r\n      // Try to reconnect after a delay\r\n      setTimeout(() => {\r\n        console.log(\"Attempting to reconnect WebSocket...\");\r\n        connectWebSocket();\r\n      }, 3000);\r\n    };\r\n    \r\n    newSocket.onerror = (error) => {\r\n      console.log(\"WebSocket error:\", error);\r\n    };\r\n    \r\n    setSocket(newSocket);\r\n  };\r\n\r\n  // Add useEffect to connect WebSocket when component mounts or gameId/user changes\r\n  useEffect(() => {\r\n    if (gameId && user?.id) {\r\n      console.log(\"Initializing WebSocket connection\");\r\n      connectWebSocket();\r\n      \r\n      // Clean up function to close socket when component unmounts\r\n      return () => {\r\n        if (socket) {\r\n          console.log(\"Component unmounting, closing WebSocket\");\r\n          socket.close();\r\n        }\r\n      };\r\n    }\r\n  }, [gameId, user?.id]); // Add socket as dependency if you want to reconnect when it changes\r\n\r\n  // Add a connection indicator to your chat header\r\n  return (\r\n    <div className={`chat-container ${team ? `team-${team.toLowerCase()}` : ''}`}>\r\n      <div className=\"chat-header\">\r\n        <h3>{team ? `${team} Team Chat` : 'Game Chat'}</h3>\r\n        <div className=\"connection-status\">\r\n          <span className={`status-indicator ${wsConnected ? 'connected' : 'disconnected'}`}></span>\r\n          <span>{wsConnected ? 'Connected' : 'Disconnected'}</span>\r\n          {!wsConnected && (\r\n            <button \r\n              type=\"button\" \r\n              className=\"reconnect-button\"\r\n              onClick={connectWebSocket}\r\n            >\r\n              Reconnect\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      {!canAccessChat() ? (\r\n        <p className=\"access-denied\">You don't have access to this team's chat</p>\r\n      ) : (\r\n        <>\r\n          <div className=\"messages-container\">\r\n            {messages.length === 0 ? (\r\n              <p className=\"no-messages\">No messages yet</p>\r\n            ) : (\r\n              messages.map((msg) => (\r\n                <div \r\n                  key={msg.id || `${msg.sender_id}-${msg.timestamp}`} \r\n                  className={`message ${msg.sender_id === user?.id ? 'own-message' : ''}`}\r\n                >\r\n                  <span className=\"message-username\">{msg.username}:</span>\r\n                  <span className=\"message-content\">{msg.content}</span>\r\n                  <span className=\"message-time\">\r\n                    {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\r\n                  </span>\r\n                </div>\r\n              ))\r\n            )}\r\n            <div ref={messagesEndRef} />\r\n            \r\n            {error && <p className=\"error-message\">{error}</p>}\r\n          </div>\r\n          \r\n          <form className=\"message-form\" onSubmit={handleSendMessage}>\r\n            <input\r\n              type=\"text\"\r\n              value={newMessage}\r\n              onChange={(e) => setNewMessage(e.target.value)}\r\n              placeholder=\"Type a message...\"\r\n              disabled={loading || !user}\r\n            />\r\n            <button \r\n              type=\"submit\" \r\n              disabled={loading || !newMessage.trim() || !user}\r\n            >\r\n              Send\r\n            </button>\r\n          </form>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}