{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anuarbek\\\\codenames-game\\\\frontend\\\\src\\\\components\\\\Card\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { GameContext } from '../../context/GameContext';\nimport { UserContext } from '../../context/UserContext';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = ({\n  card,\n  isSpymaster,\n  currentTeam,\n  playerTeam,\n  gameOver\n}) => {\n  _s();\n  const {\n    revealGameCard\n  } = useContext(GameContext);\n  const {\n    user\n  } = useContext(UserContext);\n  const handleCardClick = () => {\n    // Only allow revealing if:\n    // 1. Card is not revealed yet\n    // 2. Game is not over\n    // 3. It's the player's team's turn\n    // 4. Player is not a spymaster\n    if (!card.revealed && !gameOver && currentTeam === playerTeam && !isSpymaster && user) {\n      revealGameCard(card.game_id, card.id, user.id);\n    }\n  };\n\n  // Determine CSS classes for the card\n  const cardClasses = ['game-card'];\n  if (card.revealed) {\n    cardClasses.push('revealed');\n    cardClasses.push(`${card.type}-card`);\n  } else if (isSpymaster) {\n    // Show the card type to spymaster even if not revealed\n    cardClasses.push(`${card.type}-card-spy`);\n  }\n\n  // Determine if card is clickable\n  const isClickable = !card.revealed && !gameOver && currentTeam === playerTeam && !isSpymaster;\n  if (isClickable) {\n    cardClasses.push('clickable');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cardClasses.join(' '),\n    onClick: handleCardClick,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"card-word\",\n      children: card.word\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(Card, \"LD7qOXRTxFxFDgwjcEJF2dklmaE=\");\n_c = Card;\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useContext","GameContext","UserContext","jsxDEV","_jsxDEV","Card","card","isSpymaster","currentTeam","playerTeam","gameOver","_s","revealGameCard","user","handleCardClick","revealed","game_id","id","cardClasses","push","type","isClickable","className","join","onClick","children","word","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/components/Card/index.jsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { GameContext } from '../../context/GameContext';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport './style.css';\r\n\r\nconst Card = ({ card, isSpymaster, currentTeam, playerTeam, gameOver }) => {\r\n  const { revealGameCard } = useContext(GameContext);\r\n  const { user } = useContext(UserContext);\r\n  \r\n  const handleCardClick = () => {\r\n    // Only allow revealing if:\r\n    // 1. Card is not revealed yet\r\n    // 2. Game is not over\r\n    // 3. It's the player's team's turn\r\n    // 4. Player is not a spymaster\r\n    if (\r\n      !card.revealed &&\r\n      !gameOver &&\r\n      currentTeam === playerTeam &&\r\n      !isSpymaster &&\r\n      user\r\n    ) {\r\n      revealGameCard(card.game_id, card.id, user.id);\r\n    }\r\n  };\r\n  \r\n  // Determine CSS classes for the card\r\n  const cardClasses = ['game-card'];\r\n  \r\n  if (card.revealed) {\r\n    cardClasses.push('revealed');\r\n    cardClasses.push(`${card.type}-card`);\r\n  } else if (isSpymaster) {\r\n    // Show the card type to spymaster even if not revealed\r\n    cardClasses.push(`${card.type}-card-spy`);\r\n  }\r\n  \r\n  // Determine if card is clickable\r\n  const isClickable = \r\n    !card.revealed && \r\n    !gameOver && \r\n    currentTeam === playerTeam && \r\n    !isSpymaster;\r\n  \r\n  if (isClickable) {\r\n    cardClasses.push('clickable');\r\n  }\r\n  \r\n  return (\r\n    <div \r\n      className={cardClasses.join(' ')} \r\n      onClick={handleCardClick}\r\n    >\r\n      <span className=\"card-word\">{card.word}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,WAAW,QAAQ,2BAA2B;AACvD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,IAAI,GAAGA,CAAC;EAAEC,IAAI;EAAEC,WAAW;EAAEC,WAAW;EAAEC,UAAU;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM;IAAEC;EAAe,CAAC,GAAGZ,UAAU,CAACC,WAAW,CAAC;EAClD,MAAM;IAAEY;EAAK,CAAC,GAAGb,UAAU,CAACE,WAAW,CAAC;EAExC,MAAMY,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACA;IACA;IACA;IACA;IACA,IACE,CAACR,IAAI,CAACS,QAAQ,IACd,CAACL,QAAQ,IACTF,WAAW,KAAKC,UAAU,IAC1B,CAACF,WAAW,IACZM,IAAI,EACJ;MACAD,cAAc,CAACN,IAAI,CAACU,OAAO,EAAEV,IAAI,CAACW,EAAE,EAAEJ,IAAI,CAACI,EAAE,CAAC;IAChD;EACF,CAAC;;EAED;EACA,MAAMC,WAAW,GAAG,CAAC,WAAW,CAAC;EAEjC,IAAIZ,IAAI,CAACS,QAAQ,EAAE;IACjBG,WAAW,CAACC,IAAI,CAAC,UAAU,CAAC;IAC5BD,WAAW,CAACC,IAAI,CAAC,GAAGb,IAAI,CAACc,IAAI,OAAO,CAAC;EACvC,CAAC,MAAM,IAAIb,WAAW,EAAE;IACtB;IACAW,WAAW,CAACC,IAAI,CAAC,GAAGb,IAAI,CAACc,IAAI,WAAW,CAAC;EAC3C;;EAEA;EACA,MAAMC,WAAW,GACf,CAACf,IAAI,CAACS,QAAQ,IACd,CAACL,QAAQ,IACTF,WAAW,KAAKC,UAAU,IAC1B,CAACF,WAAW;EAEd,IAAIc,WAAW,EAAE;IACfH,WAAW,CAACC,IAAI,CAAC,WAAW,CAAC;EAC/B;EAEA,oBACEf,OAAA;IACEkB,SAAS,EAAEJ,WAAW,CAACK,IAAI,CAAC,GAAG,CAAE;IACjCC,OAAO,EAAEV,eAAgB;IAAAW,QAAA,eAEzBrB,OAAA;MAAMkB,SAAS,EAAC,WAAW;MAAAG,QAAA,EAAEnB,IAAI,CAACoB;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3C,CAAC;AAEV,CAAC;AAACnB,EAAA,CAnDIN,IAAI;AAAA0B,EAAA,GAAJ1B,IAAI;AAqDV,eAAeA,IAAI;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}