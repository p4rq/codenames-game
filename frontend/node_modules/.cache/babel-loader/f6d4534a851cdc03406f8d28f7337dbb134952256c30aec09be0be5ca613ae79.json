{"ast":null,"code":"import React,{createContext,useState}from'react';import axios from'axios';// Create context\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const GameContext=/*#__PURE__*/createContext();// API URL\nconst API_URL='/api';export const GameProvider=_ref=>{let{children}=_ref;const[error,setError]=useState(null);// Initialize with empty game structure\nconst[game,setGame]=useState({id:null,cards:[],players:[],current_turn:null,red_cards_left:0,blue_cards_left:0,winning_team:null});// Clear error\nconst clearError=()=>setError(null);// Create a new game\nconst startNewGame=async(userId,username)=>{try{setError(null);// Clear error\nconsole.log(\"Creating game with:\",{userId,username});const response=await axios.post(`${API_URL}/game/start`,{creator_id:userId,username:username});console.log(\"Server response:\",response.data);// Check if we got a valid game object with an ID\nif(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const newGame=response.data;setGame(newGame);return newGame;}catch(err){var _err$response;console.error(\"Error creating game:\",err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.data)||'Failed to create game. Please try again.');return null;}};// Join existing game\nconst joinExistingGame=async(gameId,userId,username,team)=>{try{clearError();const response=await axios.post(`${API_URL}/game/join`,{game_id:gameId,player_id:userId,username:username,team:team});const joinedGame=response.data;setGame(joinedGame);return joinedGame;}catch(err){var _err$response2,_err$response2$data;setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.message)||'Failed to join game. Please check the game code and try again.');return null;}};// Get game state\nconst getGameState=async gameId=>{try{clearError();console.log(\"Game ID from URL:\",gameId);const response=await axios.get(`${API_URL}/game/state`,{params:{id:gameId}});const gameState=response.data;console.log(\"Game state:\",gameState);setGame(gameState);return gameState;}catch(err){var _err$response3,_err$response3$data;setError(((_err$response3=err.response)===null||_err$response3===void 0?void 0:(_err$response3$data=_err$response3.data)===null||_err$response3$data===void 0?void 0:_err$response3$data.message)||'Failed to get game state.');return null;}};// Reveal card\nconst revealCard=async(gameId,cardId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/reveal`,{game_id:gameId,card_id:cardId,player_id:playerId});const updatedGame=response.data;setGame(updatedGame);return updatedGame;}catch(err){var _err$response4,_err$response4$data;setError(((_err$response4=err.response)===null||_err$response4===void 0?void 0:(_err$response4$data=_err$response4.data)===null||_err$response4$data===void 0?void 0:_err$response4$data.message)||'Failed to reveal card.');return null;}};// Set player as spymaster\nconst setSpymaster=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/set-spymaster`,null,{params:{game_id:gameId,player_id:playerId}});const updatedGame=response.data;setGame(updatedGame);return updatedGame;}catch(err){var _err$response5,_err$response5$data;setError(((_err$response5=err.response)===null||_err$response5===void 0?void 0:(_err$response5$data=_err$response5.data)===null||_err$response5$data===void 0?void 0:_err$response5$data.message)||'Failed to set spymaster.');return null;}};// End current team's turn\nconst endTurn=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/end-turn`,null,{params:{game_id:gameId,player_id:playerId}});const updatedGame=response.data;setGame(updatedGame);return updatedGame;}catch(err){var _err$response6,_err$response6$data;setError(((_err$response6=err.response)===null||_err$response6===void 0?void 0:(_err$response6$data=_err$response6.data)===null||_err$response6$data===void 0?void 0:_err$response6$data.message)||'Failed to end turn.');return null;}};return/*#__PURE__*/_jsx(GameContext.Provider,{value:{game,error,startNewGame,joinExistingGame,getGameState,revealCard,setSpymaster,endTurn,clearError},children:children});};","map":{"version":3,"names":["React","createContext","useState","axios","jsx","_jsx","GameContext","API_URL","GameProvider","_ref","children","error","setError","game","setGame","id","cards","players","current_turn","red_cards_left","blue_cards_left","winning_team","clearError","startNewGame","userId","username","console","log","response","post","creator_id","data","newGame","err","_err$response","joinExistingGame","gameId","team","game_id","player_id","joinedGame","_err$response2","_err$response2$data","message","getGameState","get","params","gameState","_err$response3","_err$response3$data","revealCard","cardId","playerId","card_id","updatedGame","_err$response4","_err$response4$data","setSpymaster","_err$response5","_err$response5$data","endTurn","_err$response6","_err$response6$data","Provider","value"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/context/GameContext.jsx"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create context\r\nexport const GameContext = createContext();\r\n\r\n// API URL\r\nconst API_URL = '/api';\r\nexport const GameProvider = ({ children }) => {\r\n  const [error, setError] = useState(null);\r\n  // Initialize with empty game structure\r\n  const [game, setGame] = useState({\r\n    id: null,\r\n    cards: [],\r\n    players: [],\r\n    current_turn: null,\r\n    red_cards_left: 0,\r\n    blue_cards_left: 0,\r\n    winning_team: null\r\n  });\r\n  \r\n  // Clear error\r\n  const clearError = () => setError(null);\r\n  \r\n  // Create a new game\r\n  const startNewGame = async (userId, username) => {\r\n    try {\r\n      setError(null); // Clear error\r\n      \r\n      console.log(\"Creating game with:\", { userId, username });\r\n      \r\n      const response = await axios.post(`${API_URL}/game/start`, {\r\n        creator_id: userId,\r\n        username: username\r\n      });\r\n      \r\n      console.log(\"Server response:\", response.data);\r\n      \r\n      // Check if we got a valid game object with an ID\r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const newGame = response.data;\r\n      setGame(newGame);\r\n      return newGame;\r\n    } catch (err) {\r\n      console.error(\"Error creating game:\", err);\r\n      setError(err.response?.data || 'Failed to create game. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Join existing game\r\n  const joinExistingGame = async (gameId, userId, username, team) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/join`, {\r\n        game_id: gameId,\r\n        player_id: userId,\r\n        username: username,\r\n        team: team\r\n      });\r\n      \r\n      const joinedGame = response.data;\r\n      setGame(joinedGame);\r\n      return joinedGame;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to join game. Please check the game code and try again.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Get game state\r\n  const getGameState = async (gameId) => {\r\n    try {\r\n      clearError();\r\n      console.log(\"Game ID from URL:\", gameId);\r\n      const response = await axios.get(`${API_URL}/game/state`, { \r\n        params: { id: gameId } \r\n      });\r\n      \r\n      const gameState = response.data;\r\n      console.log(\"Game state:\", gameState);\r\n      setGame(gameState);\r\n      return gameState;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to get game state.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Reveal card\r\n  const revealCard = async (gameId, cardId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/reveal`, {\r\n        game_id: gameId,\r\n        card_id: cardId,\r\n        player_id: playerId\r\n      });\r\n      \r\n      const updatedGame = response.data;\r\n      setGame(updatedGame);\r\n      return updatedGame;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to reveal card.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Set player as spymaster\r\n  const setSpymaster = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/set-spymaster`, null, {\r\n        params: {\r\n          game_id: gameId,\r\n          player_id: playerId\r\n        }\r\n      });\r\n      \r\n      const updatedGame = response.data;\r\n      setGame(updatedGame);\r\n      return updatedGame;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to set spymaster.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // End current team's turn\r\n  const endTurn = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/end-turn`, null, {\r\n        params: {\r\n          game_id: gameId,\r\n          player_id: playerId\r\n        }\r\n      });\r\n      \r\n      const updatedGame = response.data;\r\n      setGame(updatedGame);\r\n      return updatedGame;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to end turn.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={{ \r\n      game,\r\n      error,\r\n      startNewGame,\r\n      joinExistingGame,\r\n      getGameState,\r\n      revealCard,\r\n      setSpymaster,\r\n      endTurn,\r\n      clearError\r\n    }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}