{"ast":null,"code":"import React,{createContext,useState,useContext,useCallback}from'react';import axios from'axios';import{UserContext}from'./UserContext';import{jsx as _jsx}from\"react/jsx-runtime\";export const GameContext=/*#__PURE__*/createContext();// Define API base URL with the /api prefix\nconst API_URL='/api';// Add request/response interceptors for debugging\naxios.interceptors.request.use(config=>{console.log('API Request:',{method:config.method,url:config.url,data:config.data});return config;},error=>{console.error('API Request Error:',error);return Promise.reject(error);});axios.interceptors.response.use(response=>{console.log('API Response:',{status:response.status,data:response.data});return response;},error=>{var _error$response,_error$response2;console.error('API Response Error:',{status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,data:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data});return Promise.reject(error);});export const GameProvider=_ref=>{let{children}=_ref;const[game,setGame]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const{user,updateUser}=useContext(UserContext);const clearError=()=>setError(null);const startNewGame=async(playerId,username)=>{clearError();try{console.log(`Starting new game for player: ${playerId}, ${username}`);const response=await axios.post(`${API_URL}/game/start`,{creator_id:playerId,// Changed from player_id to creator_id\nusername:username});if(response.status===200||response.status===201){console.log(\"Server response:\",response.data);setGame(response.data);return response.data;}else{throw new Error(`Failed to start game: ${response.statusText}`);}}catch(err){console.error(\"Error starting game:\",err);setError(`Failed to start game: ${err.message||'Unknown error'}`);return null;}};// Add the joinExistingGame function\nconst joinExistingGame=async(gameId,userId,username,team)=>{try{clearError();console.log(\"Joining game:\",{gameId,userId,username,team});const response=await axios.post(`${API_URL}/game/join`,{game_id:gameId,player_id:userId,username:username,team:team});console.log(\"Join game response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const joinedGame=response.data;setGame(joinedGame);return joinedGame;}catch(err){var _err$response;console.error(\"Error joining game:\",err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.data)||'Failed to join game. Please try again.');return null;}};// Other methods like getGameState also need the API prefix\nconst getGameState=async gameId=>{try{clearError();const response=await axios.get(`${API_URL}/game/state?id=${gameId}`);return response.data;}catch(err){var _err$response2;console.error(\"Error fetching game state:\",err);setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:_err$response2.data)||'Failed to load game.');return null;}};// Make sure all other API calls use the same prefix\nconst revealCard=async(gameId,cardId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/reveal`,{game_id:gameId,card_id:cardId,player_id:playerId});return response.data;}catch(err){var _err$response3;console.error(\"Error revealing card:\",err);setError(((_err$response3=err.response)===null||_err$response3===void 0?void 0:_err$response3.data)||'Failed to reveal card.');return null;}};const setSpymaster=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/set-spymaster?game_id=${gameId}&player_id=${playerId}`);return response.data;}catch(err){var _err$response4;console.error(\"Error setting spymaster:\",err);setError(((_err$response4=err.response)===null||_err$response4===void 0?void 0:_err$response4.data)||'Failed to become spymaster.');return null;}};const endTurn=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/end-turn?game_id=${gameId}&player_id=${playerId}`);return response.data;}catch(err){var _err$response5;console.error(\"Error ending turn:\",err);setError(((_err$response5=err.response)===null||_err$response5===void 0?void 0:_err$response5.data)||'Failed to end turn.');return null;}};// Update the changeTeam function to immediately update UI\nconst changeTeam=async(gameId,playerId,team)=>{try{// IMPORTANT: First update the user context before API call for immediate UI feedback\nif(user&&user.id===playerId){console.log(`Immediately updating user context with new team: ${team}`);// Update local state right away (don't wait for API)\nupdateUser({...user,team:team});// Update localStorage right away too\ntry{const userData=JSON.parse(localStorage.getItem('user'));if(userData){userData.team=team;localStorage.setItem('user',JSON.stringify(userData));console.log('Updated user in localStorage with new team:',userData);}}catch(e){console.error('Error updating localStorage:',e);}// If we have game state with players, update that too for immediate UI feedback\nif(game&&game.players){const updatedPlayers=game.players.map(player=>player.id===playerId?{...player,team:team}:player);const updatedGame={...game,players:updatedPlayers};setGame(updatedGame);console.log('Updated game state with new team for player');}}// Now make the API call (even if it fails, UI is already updated)\nconsole.log(`API Request: \"/api/game/change-team\"`,{method:'post',url:'/api/game/change-team',data:{game_id:gameId,player_id:playerId,team:team}});const response=await axios.post('/api/game/change-team',{game_id:gameId,player_id:playerId,team:team});// If API call succeeds, update with server response\nif(response.data){setGame(response.data);}return true;}catch(err){console.error(\"Error changing team:\",err);// Even if API call fails, we don't revert the UI change\n// to prevent UI flickering\nreturn false;}};// Set user team both in backend and in user context\nconst setUserTeam=async(gameId,team)=>{if(!user)return null;try{// Update team on server\nconst gameResponse=await changeTeam(gameId,user.id,team);// Force user context update even if server call fails\nupdateUser({...user,team:team});// Also update the user in localStorage for persistence\ntry{const storedUser=JSON.parse(localStorage.getItem('user'));if(storedUser){localStorage.setItem('user',JSON.stringify({...storedUser,team:team}));}}catch(e){console.error(\"Error updating user in localStorage:\",e);}// Also update the game state if server response was successful\nif(gameResponse){setGame(gameResponse);}else{// If server update failed but we still want UI to update, manually update the game state\nif(game&&game.players){const updatedPlayers=game.players.map(p=>p.id===user.id?{...p,team:team}:p);setGame({...game,players:updatedPlayers});}}console.log(`Team changed to ${team} for user ${user.username}`);return true;}catch(error){console.error(\"Error setting user team:\",error);setError(`Failed to change team: ${error.message}`);return false;}};// Fixed handleTeamChange function\nconst handleTeamChange=async(gameId,teamColor)=>{if(!user||!game)return;try{// Update user team on server and in context\nconst updatedUser=await setUserTeam(gameId,teamColor);if(!updatedUser){console.error('Failed to update user team');return;}// Update local game state too\nconst updatedGame={...game};// Find and update the player in the game state\nif(updatedGame.players){const playerIndex=updatedGame.players.findIndex(p=>p.id===user.id);if(playerIndex>=0){updatedGame.players[playerIndex].team=teamColor;setGame(updatedGame);}}console.log(`Team changed to ${teamColor} for user ${user.username}`);}catch(error){console.error('Error changing team:',error);}};// Update the provider value with all functions\nreturn/*#__PURE__*/_jsx(GameContext.Provider,{value:{game,setGame,loading,error,clearError,setError,startNewGame,joinExistingGame,getGameState,revealCard,setSpymaster,endTurn,changeTeam,setUserTeam,handleTeamChange},children:children});};","map":{"version":3,"names":["React","createContext","useState","useContext","useCallback","axios","UserContext","jsx","_jsx","GameContext","API_URL","interceptors","request","use","config","console","log","method","url","data","error","Promise","reject","response","status","_error$response","_error$response2","GameProvider","_ref","children","game","setGame","loading","setLoading","setError","user","updateUser","clearError","startNewGame","playerId","username","post","creator_id","Error","statusText","err","message","joinExistingGame","gameId","userId","team","game_id","player_id","id","joinedGame","_err$response","getGameState","get","_err$response2","revealCard","cardId","card_id","_err$response3","setSpymaster","_err$response4","endTurn","_err$response5","changeTeam","userData","JSON","parse","localStorage","getItem","setItem","stringify","e","players","updatedPlayers","map","player","updatedGame","setUserTeam","gameResponse","storedUser","p","handleTeamChange","teamColor","updatedUser","playerIndex","findIndex","Provider","value"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/context/GameContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { UserContext } from './UserContext';\r\n\r\nexport const GameContext = createContext();\r\n\r\n// Define API base URL with the /api prefix\r\nconst API_URL = '/api';\r\n\r\n// Add request/response interceptors for debugging\r\naxios.interceptors.request.use(\r\n  config => {\r\n    console.log('API Request:', {\r\n      method: config.method,\r\n      url: config.url,\r\n      data: config.data\r\n    });\r\n    return config;\r\n  },\r\n  error => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxios.interceptors.response.use(\r\n  response => {\r\n    console.log('API Response:', {\r\n      status: response.status,\r\n      data: response.data\r\n    });\r\n    return response;\r\n  },\r\n  error => {\r\n    console.error('API Response Error:', {\r\n      status: error.response?.status,\r\n      data: error.response?.data\r\n    });\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [game, setGame] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n  const { user, updateUser } = useContext(UserContext);\r\n\r\n  const clearError = () => setError(null);\r\n\r\n  const startNewGame = async (playerId, username) => {\r\n    clearError();\r\n    \r\n    try {\r\n      console.log(`Starting new game for player: ${playerId}, ${username}`);\r\n      \r\n      const response = await axios.post(`${API_URL}/game/start`, {\r\n        creator_id: playerId,  // Changed from player_id to creator_id\r\n        username: username\r\n      });\r\n      \r\n      if (response.status === 200 || response.status === 201) {\r\n        console.log(\"Server response:\", response.data);\r\n        setGame(response.data);\r\n        return response.data;\r\n      } else {\r\n        throw new Error(`Failed to start game: ${response.statusText}`);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error starting game:\", err);\r\n      setError(`Failed to start game: ${err.message || 'Unknown error'}`);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Add the joinExistingGame function\r\n  const joinExistingGame = async (gameId, userId, username, team) => {\r\n    try {\r\n      clearError();\r\n      console.log(\"Joining game:\", { gameId, userId, username, team });\r\n      \r\n      const response = await axios.post(`${API_URL}/game/join`, {\r\n        game_id: gameId,\r\n        player_id: userId,\r\n        username: username,\r\n        team: team\r\n      });\r\n      \r\n      console.log(\"Join game response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const joinedGame = response.data;\r\n      setGame(joinedGame);\r\n      return joinedGame;\r\n    } catch (err) {\r\n      console.error(\"Error joining game:\", err);\r\n      setError(err.response?.data || 'Failed to join game. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Other methods like getGameState also need the API prefix\r\n  const getGameState = async (gameId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.get(`${API_URL}/game/state?id=${gameId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error fetching game state:\", err);\r\n      setError(err.response?.data || 'Failed to load game.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Make sure all other API calls use the same prefix\r\n  const revealCard = async (gameId, cardId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/reveal`, {\r\n        game_id: gameId,\r\n        card_id: cardId,\r\n        player_id: playerId\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error revealing card:\", err);\r\n      setError(err.response?.data || 'Failed to reveal card.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const setSpymaster = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/set-spymaster?game_id=${gameId}&player_id=${playerId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error setting spymaster:\", err);\r\n      setError(err.response?.data || 'Failed to become spymaster.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const endTurn = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/end-turn?game_id=${gameId}&player_id=${playerId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error ending turn:\", err);\r\n      setError(err.response?.data || 'Failed to end turn.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Update the changeTeam function to immediately update UI\r\n  const changeTeam = async (gameId, playerId, team) => {\r\n    try {\r\n      // IMPORTANT: First update the user context before API call for immediate UI feedback\r\n      if (user && user.id === playerId) {\r\n        console.log(`Immediately updating user context with new team: ${team}`);\r\n        \r\n        // Update local state right away (don't wait for API)\r\n        updateUser({\r\n          ...user,\r\n          team: team\r\n        });\r\n        \r\n        // Update localStorage right away too\r\n        try {\r\n          const userData = JSON.parse(localStorage.getItem('user'));\r\n          if (userData) {\r\n            userData.team = team;\r\n            localStorage.setItem('user', JSON.stringify(userData));\r\n            console.log('Updated user in localStorage with new team:', userData);\r\n          }\r\n        } catch (e) {\r\n          console.error('Error updating localStorage:', e);\r\n        }\r\n        \r\n        // If we have game state with players, update that too for immediate UI feedback\r\n        if (game && game.players) {\r\n          const updatedPlayers = game.players.map(player => \r\n            player.id === playerId \r\n              ? { ...player, team: team } \r\n              : player\r\n          );\r\n          \r\n          const updatedGame = { ...game, players: updatedPlayers };\r\n          setGame(updatedGame);\r\n          console.log('Updated game state with new team for player');\r\n        }\r\n      }\r\n  \r\n      // Now make the API call (even if it fails, UI is already updated)\r\n      console.log(`API Request: \"/api/game/change-team\"`, {\r\n        method: 'post',\r\n        url: '/api/game/change-team',\r\n        data: {\r\n          game_id: gameId,\r\n          player_id: playerId,\r\n          team: team\r\n        }\r\n      });\r\n  \r\n      const response = await axios.post('/api/game/change-team', {\r\n        game_id: gameId,\r\n        player_id: playerId,\r\n        team: team\r\n      });\r\n      \r\n      // If API call succeeds, update with server response\r\n      if (response.data) {\r\n        setGame(response.data);\r\n      }\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error(\"Error changing team:\", err);\r\n      // Even if API call fails, we don't revert the UI change\r\n      // to prevent UI flickering\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Set user team both in backend and in user context\r\n  const setUserTeam = async (gameId, team) => {\r\n    if (!user) return null;\r\n    \r\n    try {\r\n      // Update team on server\r\n      const gameResponse = await changeTeam(gameId, user.id, team);\r\n      \r\n      // Force user context update even if server call fails\r\n      updateUser({ ...user, team: team });\r\n      \r\n      // Also update the user in localStorage for persistence\r\n      try {\r\n        const storedUser = JSON.parse(localStorage.getItem('user'));\r\n        if (storedUser) {\r\n          localStorage.setItem('user', JSON.stringify({ ...storedUser, team: team }));\r\n        }\r\n      } catch (e) {\r\n        console.error(\"Error updating user in localStorage:\", e);\r\n      }\r\n      \r\n      // Also update the game state if server response was successful\r\n      if (gameResponse) {\r\n        setGame(gameResponse);\r\n      } else {\r\n        // If server update failed but we still want UI to update, manually update the game state\r\n        if (game && game.players) {\r\n          const updatedPlayers = game.players.map(p => \r\n            p.id === user.id ? { ...p, team: team } : p\r\n          );\r\n          setGame({ ...game, players: updatedPlayers });\r\n        }\r\n      }\r\n      \r\n      console.log(`Team changed to ${team} for user ${user.username}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error setting user team:\", error);\r\n      setError(`Failed to change team: ${error.message}`);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Fixed handleTeamChange function\r\n  const handleTeamChange = async (gameId, teamColor) => {\r\n    if (!user || !game) return;\r\n\r\n    try {\r\n      // Update user team on server and in context\r\n      const updatedUser = await setUserTeam(gameId, teamColor);\r\n      \r\n      if (!updatedUser) {\r\n        console.error('Failed to update user team');\r\n        return;\r\n      }\r\n\r\n      // Update local game state too\r\n      const updatedGame = { ...game };\r\n      \r\n      // Find and update the player in the game state\r\n      if (updatedGame.players) {\r\n        const playerIndex = updatedGame.players.findIndex(p => p.id === user.id);\r\n        if (playerIndex >= 0) {\r\n          updatedGame.players[playerIndex].team = teamColor;\r\n          setGame(updatedGame);\r\n        }\r\n      }\r\n      \r\n      console.log(`Team changed to ${teamColor} for user ${user.username}`);\r\n    } catch (error) {\r\n      console.error('Error changing team:', error);\r\n    }\r\n  };\r\n  \r\n  // Update the provider value with all functions\r\n  return (\r\n    <GameContext.Provider \r\n      value={{ \r\n        game, \r\n        setGame,\r\n        loading,\r\n        error, \r\n        clearError,\r\n        setError,\r\n        startNewGame, \r\n        joinExistingGame,\r\n        getGameState, \r\n        revealCard, \r\n        setSpymaster, \r\n        endTurn,\r\n        changeTeam,\r\n        setUserTeam,\r\n        handleTeamChange\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}