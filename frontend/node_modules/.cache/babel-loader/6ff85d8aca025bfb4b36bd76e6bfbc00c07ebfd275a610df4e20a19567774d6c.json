{"ast":null,"code":"import React,{createContext,useState,useCallback,useRef,useEffect}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";export const GameContext=/*#__PURE__*/createContext({});export const GameProvider=_ref=>{let{children}=_ref;const[game,setGame]=useState(null);const[error,setError]=useState(null);const[loading,setLoading]=useState(false);const[wsConnected,setWsConnected]=useState(false);const socketRef=useRef(null);const pollingIntervalRef=useRef(null);const pollingTimeoutRef=useRef(null);const API_URL='/api';// For debugging\nuseEffect(()=>{console.log(\"WebSocket connected state:\",wsConnected);},[wsConnected]);const clearError=useCallback(()=>{setError(null);},[]);// Function to fetch game state (polling)\nconst fetchGameState=useCallback(async gameId=>{if(!gameId)return;try{console.log(\"Polling game state for:\",gameId);const response=await axios.get(`${API_URL}/api/game/state?game_id=${gameId}`);setGame(response.data);}catch(err){console.error(\"Error fetching game state:\",err);}},[]);// Stop polling function\nconst stopPolling=useCallback(()=>{if(pollingIntervalRef.current){console.log(\"Stopping polling\");clearInterval(pollingIntervalRef.current);pollingIntervalRef.current=null;}},[]);// Start polling with rate limiting to prevent excessive requests\nconst startPolling=useCallback(gameId=>{if(wsConnected){console.log(\"WebSocket connected, not starting polling\");return;}if(pollingIntervalRef.current){stopPolling();}console.log(\"Starting polling for game:\",gameId);// Use a longer interval (10 seconds) to reduce server load\npollingIntervalRef.current=setInterval(()=>{// Additional check to avoid polling when WebSocket is connected\nif(!wsConnected&&gameId){fetchGameState(gameId);}else if(wsConnected){console.log(\"WebSocket now connected, stopping polling\");stopPolling();}},10000);// 10 seconds\n},[fetchGameState,stopPolling,wsConnected]);// Setup WebSocket connection with reconnection logic\nconst setupWebSocket=useCallback(gameId=>{if(!gameId)return null;// Clean up any existing socket\nif(socketRef.current){console.log(\"Closing existing WebSocket connection\");socketRef.current.close();socketRef.current=null;}const userId=localStorage.getItem('userId');// Use relative path for WebSocket URL to match the current host\nconst wsProtocol=window.location.protocol==='https:'?'wss:':'ws:';const wsUrl=`${wsProtocol}//${window.location.host}/ws/game/${gameId}?client_id=${userId}`;console.log(\"Setting up WebSocket connection to:\",wsUrl);try{const socket=new WebSocket(wsUrl);socket.onopen=()=>{console.log(\"WebSocket connection established\");setWsConnected(true);stopPolling();};socket.onmessage=event=>{try{const gameUpdate=JSON.parse(event.data);console.log(\"Received game update via WebSocket\");setGame(gameUpdate);}catch(err){console.error(\"Error parsing WebSocket message:\",err);}};socket.onclose=event=>{console.log(\"WebSocket connection closed:\",event);setWsConnected(false);// Start fallback polling with a delay\nif(gameId&&!pollingIntervalRef.current){console.log(\"WebSocket closed, setting up fallback polling\");startPolling(gameId);}};socket.onerror=error=>{console.error(\"WebSocket error:\",error);setWsConnected(false);};socketRef.current=socket;return socket;}catch(err){console.error(\"Error setting up WebSocket:\",err);return null;}},[stopPolling,startPolling]);// Function to join or load a game\nconst joinOrLoadGame=useCallback(async(gameId,playerId,username,team)=>{try{clearError();setLoading(true);// First try to join the game\nconst joinResponse=await axios.post(`${API_URL}/api/game/join`,{game_id:gameId,player_id:playerId,username,team});setGame(joinResponse.data);// Set up WebSocket connection after successfully joining\nsetupWebSocket(gameId);// Set up fallback polling only if WebSocket isn't connected yet\nif(!wsConnected){console.log(\"WebSocket not yet connected, setting up initial fallback polling\");// Delay the start of polling by a few seconds to give WebSocket a chance to connect\npollingTimeoutRef.current=setTimeout(()=>{if(!wsConnected){startPolling(gameId);}},3000);// Wait 3 seconds before starting polling\n}return joinResponse.data;}catch(err){var _err$response,_err$response$data;console.error(\"Error joining game:\",err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||'Failed to join game');return null;}finally{setLoading(false);}},[setupWebSocket,wsConnected,startPolling,clearError]);// Function to change team with WebSocket reconnection\nconst changeTeam=async(gameId,playerId,team)=>{try{clearError();console.log(`Changing team for player ${playerId} to ${team} in game ${gameId}`);const response=await axios.post(`${API_URL}/api/game/change-team`,{game_id:gameId,player_id:playerId,team:team});console.log(\"Change team response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const updatedGame=response.data;setGame(updatedGame);// Re-establish WebSocket connection after team change\n// Give the server a moment to process the team change before reconnecting\nsetTimeout(()=>{console.log(\"Re-establishing WebSocket connection after team change\");setupWebSocket(gameId);},500);return updatedGame;}catch(err){var _err$response2,_err$response2$data;console.error('Error changing team:',err);setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.message)||'Failed to change team. Please try again.');return null;}};// Clean up all resources on unmount\nuseEffect(()=>{return()=>{console.log(\"Cleaning up GameContext resources\");if(socketRef.current){socketRef.current.close();socketRef.current=null;}if(pollingIntervalRef.current){clearInterval(pollingIntervalRef.current);pollingIntervalRef.current=null;}if(pollingTimeoutRef.current){clearTimeout(pollingTimeoutRef.current);pollingTimeoutRef.current=null;}};},[]);// Value object for the context provider\nconst contextValue={game,loading,error,clearError,createGame,// Assuming you have a createGame function\njoinOrLoadGame,revealCard,// Assuming you have a revealCard function\nsetSpymaster,// Assuming you have a setSpymaster function\nendTurn,// Assuming you have an endTurn function\nchangeTeam,wsConnected};return/*#__PURE__*/_jsx(GameContext.Provider,{value:contextValue,children:children});};","map":{"version":3,"names":["React","createContext","useState","useCallback","useRef","useEffect","axios","jsx","_jsx","GameContext","GameProvider","_ref","children","game","setGame","error","setError","loading","setLoading","wsConnected","setWsConnected","socketRef","pollingIntervalRef","pollingTimeoutRef","API_URL","console","log","clearError","fetchGameState","gameId","response","get","data","err","stopPolling","current","clearInterval","startPolling","setInterval","setupWebSocket","close","userId","localStorage","getItem","wsProtocol","window","location","protocol","wsUrl","host","socket","WebSocket","onopen","onmessage","event","gameUpdate","JSON","parse","onclose","onerror","joinOrLoadGame","playerId","username","team","joinResponse","post","game_id","player_id","setTimeout","_err$response","_err$response$data","message","changeTeam","id","updatedGame","_err$response2","_err$response2$data","clearTimeout","contextValue","createGame","revealCard","setSpymaster","endTurn","Provider","value"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/context/GameContext.jsx"],"sourcesContent":["import React, { createContext, useState, useCallback, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const GameContext = createContext({});\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [game, setGame] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [wsConnected, setWsConnected] = useState(false);\r\n  const socketRef = useRef(null);\r\n  const pollingIntervalRef = useRef(null);\r\n  const pollingTimeoutRef = useRef(null);\r\n  const API_URL = '/api';\r\n  // For debugging\r\n  useEffect(() => {\r\n    console.log(\"WebSocket connected state:\", wsConnected);\r\n  }, [wsConnected]);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  // Function to fetch game state (polling)\r\n  const fetchGameState = useCallback(async (gameId) => {\r\n    if (!gameId) return;\r\n    \r\n    try {\r\n      console.log(\"Polling game state for:\", gameId);\r\n      const response = await axios.get(`${API_URL}/api/game/state?game_id=${gameId}`);\r\n      setGame(response.data);\r\n    } catch (err) {\r\n      console.error(\"Error fetching game state:\", err);\r\n    }\r\n  }, []);\r\n\r\n  // Stop polling function\r\n  const stopPolling = useCallback(() => {\r\n    if (pollingIntervalRef.current) {\r\n      console.log(\"Stopping polling\");\r\n      clearInterval(pollingIntervalRef.current);\r\n      pollingIntervalRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Start polling with rate limiting to prevent excessive requests\r\n  const startPolling = useCallback((gameId) => {\r\n    if (wsConnected) {\r\n      console.log(\"WebSocket connected, not starting polling\");\r\n      return;\r\n    }\r\n    \r\n    if (pollingIntervalRef.current) {\r\n      stopPolling();\r\n    }\r\n    \r\n    console.log(\"Starting polling for game:\", gameId);\r\n    // Use a longer interval (10 seconds) to reduce server load\r\n    pollingIntervalRef.current = setInterval(() => {\r\n      // Additional check to avoid polling when WebSocket is connected\r\n      if (!wsConnected && gameId) {\r\n        fetchGameState(gameId);\r\n      } else if (wsConnected) {\r\n        console.log(\"WebSocket now connected, stopping polling\");\r\n        stopPolling();\r\n      }\r\n    }, 10000); // 10 seconds\r\n  }, [fetchGameState, stopPolling, wsConnected]);\r\n\r\n  // Setup WebSocket connection with reconnection logic\r\n  const setupWebSocket = useCallback((gameId) => {\r\n    if (!gameId) return null;\r\n    \r\n    // Clean up any existing socket\r\n    if (socketRef.current) {\r\n      console.log(\"Closing existing WebSocket connection\");\r\n      socketRef.current.close();\r\n      socketRef.current = null;\r\n    }\r\n    \r\n    const userId = localStorage.getItem('userId');\r\n    // Use relative path for WebSocket URL to match the current host\r\n    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const wsUrl = `${wsProtocol}//${window.location.host}/ws/game/${gameId}?client_id=${userId}`;\r\n    \r\n    console.log(\"Setting up WebSocket connection to:\", wsUrl);\r\n    \r\n    try {\r\n      const socket = new WebSocket(wsUrl);\r\n      \r\n      socket.onopen = () => {\r\n        console.log(\"WebSocket connection established\");\r\n        setWsConnected(true);\r\n        stopPolling();\r\n      };\r\n      \r\n      socket.onmessage = (event) => {\r\n        try {\r\n          const gameUpdate = JSON.parse(event.data);\r\n          console.log(\"Received game update via WebSocket\");\r\n          setGame(gameUpdate);\r\n        } catch (err) {\r\n          console.error(\"Error parsing WebSocket message:\", err);\r\n        }\r\n      };\r\n      \r\n      socket.onclose = (event) => {\r\n        console.log(\"WebSocket connection closed:\", event);\r\n        setWsConnected(false);\r\n        \r\n        // Start fallback polling with a delay\r\n        if (gameId && !pollingIntervalRef.current) {\r\n          console.log(\"WebSocket closed, setting up fallback polling\");\r\n          startPolling(gameId);\r\n        }\r\n      };\r\n      \r\n      socket.onerror = (error) => {\r\n        console.error(\"WebSocket error:\", error);\r\n        setWsConnected(false);\r\n      };\r\n      \r\n      socketRef.current = socket;\r\n      return socket;\r\n    } catch (err) {\r\n      console.error(\"Error setting up WebSocket:\", err);\r\n      return null;\r\n    }\r\n  }, [stopPolling, startPolling]);\r\n\r\n  // Function to join or load a game\r\n  const joinOrLoadGame = useCallback(async (gameId, playerId, username, team) => {\r\n    try {\r\n      clearError();\r\n      setLoading(true);\r\n      \r\n      // First try to join the game\r\n      const joinResponse = await axios.post(`${API_URL}/api/game/join`, {\r\n        game_id: gameId,\r\n        player_id: playerId,\r\n        username,\r\n        team\r\n      });\r\n      \r\n      setGame(joinResponse.data);\r\n      \r\n      // Set up WebSocket connection after successfully joining\r\n      setupWebSocket(gameId);\r\n      \r\n      // Set up fallback polling only if WebSocket isn't connected yet\r\n      if (!wsConnected) {\r\n        console.log(\"WebSocket not yet connected, setting up initial fallback polling\");\r\n        // Delay the start of polling by a few seconds to give WebSocket a chance to connect\r\n        pollingTimeoutRef.current = setTimeout(() => {\r\n          if (!wsConnected) {\r\n            startPolling(gameId);\r\n          }\r\n        }, 3000); // Wait 3 seconds before starting polling\r\n      }\r\n      \r\n      return joinResponse.data;\r\n    } catch (err) {\r\n      console.error(\"Error joining game:\", err);\r\n      setError(err.response?.data?.message || 'Failed to join game');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [setupWebSocket, wsConnected, startPolling, clearError]);\r\n\r\n  // Function to change team with WebSocket reconnection\r\n  const changeTeam = async (gameId, playerId, team) => {\r\n    try {\r\n      clearError();\r\n      console.log(`Changing team for player ${playerId} to ${team} in game ${gameId}`);\r\n      \r\n      const response = await axios.post(`${API_URL}/api/game/change-team`, {\r\n        game_id: gameId,\r\n        player_id: playerId,\r\n        team: team\r\n      });\r\n      \r\n      console.log(\"Change team response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const updatedGame = response.data;\r\n      setGame(updatedGame);\r\n      \r\n      // Re-establish WebSocket connection after team change\r\n      // Give the server a moment to process the team change before reconnecting\r\n      setTimeout(() => {\r\n        console.log(\"Re-establishing WebSocket connection after team change\");\r\n        setupWebSocket(gameId);\r\n      }, 500);\r\n      \r\n      return updatedGame;\r\n    } catch (err) {\r\n      console.error('Error changing team:', err);\r\n      setError(err.response?.data?.message || 'Failed to change team. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Clean up all resources on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      console.log(\"Cleaning up GameContext resources\");\r\n      if (socketRef.current) {\r\n        socketRef.current.close();\r\n        socketRef.current = null;\r\n      }\r\n      \r\n      if (pollingIntervalRef.current) {\r\n        clearInterval(pollingIntervalRef.current);\r\n        pollingIntervalRef.current = null;\r\n      }\r\n      \r\n      if (pollingTimeoutRef.current) {\r\n        clearTimeout(pollingTimeoutRef.current);\r\n        pollingTimeoutRef.current = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Value object for the context provider\r\n  const contextValue = {\r\n    game,\r\n    loading,\r\n    error,\r\n    clearError,\r\n    createGame,  // Assuming you have a createGame function\r\n    joinOrLoadGame,\r\n    revealCard,  // Assuming you have a revealCard function\r\n    setSpymaster, // Assuming you have a setSpymaster function\r\n    endTurn,     // Assuming you have an endTurn function\r\n    changeTeam,\r\n    wsConnected\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={contextValue}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}