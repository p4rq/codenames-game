{"ast":null,"code":"import React,{createContext,useState,useCallback,useRef,useEffect}from'react';import axios from'axios';import API_URL from'../config/api';import{jsx as _jsx}from\"react/jsx-runtime\";export const GameContext=/*#__PURE__*/createContext({});export const GameProvider=_ref=>{let{children}=_ref;const[game,setGame]=useState(null);const[error,setError]=useState(null);const[loading,setLoading]=useState(false);const[wsConnected,setWsConnected]=useState(false);const socketRef=useRef(null);const pollingIntervalRef=useRef(null);const pollingTimeoutRef=useRef(null);// For debugging\nuseEffect(()=>{console.log(\"WebSocket connected state:\",wsConnected);},[wsConnected]);const clearError=useCallback(()=>{setError(null);},[]);// Function to fetch game state (polling)\nconst fetchGameState=useCallback(async gameId=>{if(!gameId)return;try{console.log(\"Polling game state for:\",gameId);const response=await axios.get(`${API_URL}/api/game/state?game_id=${gameId}`);setGame(response.data);}catch(err){console.error(\"Error fetching game state:\",err);}},[]);// Stop polling function\nconst stopPolling=useCallback(()=>{if(pollingIntervalRef.current){console.log(\"Stopping polling\");clearInterval(pollingIntervalRef.current);pollingIntervalRef.current=null;}},[]);// Start polling with rate limiting to prevent excessive requests\nconst startPolling=useCallback(gameId=>{if(wsConnected){console.log(\"WebSocket connected, not starting polling\");return;}if(pollingIntervalRef.current){stopPolling();}console.log(\"Starting polling for game:\",gameId);// Use a longer interval (10 seconds) to reduce server load\npollingIntervalRef.current=setInterval(()=>{// Additional check to avoid polling when WebSocket is connected\nif(!wsConnected&&gameId){fetchGameState(gameId);}else if(wsConnected){console.log(\"WebSocket now connected, stopping polling\");stopPolling();}},10000);// 10 seconds\n},[fetchGameState,stopPolling,wsConnected]);// Setup WebSocket connection with reconnection logic\nconst setupWebSocket=useCallback(gameId=>{if(!gameId)return null;// Clean up any existing socket\nif(socketRef.current){console.log(\"Closing existing WebSocket connection\");socketRef.current.close();socketRef.current=null;}const userId=localStorage.getItem('userId');// Use relative path for WebSocket URL to match the current host\nconst wsProtocol=window.location.protocol==='https:'?'wss:':'ws:';const wsUrl=`${wsProtocol}//${window.location.host}/ws/game/${gameId}?client_id=${userId}`;console.log(\"Setting up WebSocket connection to:\",wsUrl);try{const socket=new WebSocket(wsUrl);socket.onopen=()=>{console.log(\"WebSocket connection established\");setWsConnected(true);stopPolling();};socket.onmessage=event=>{try{const gameUpdate=JSON.parse(event.data);console.log(\"Received game update via WebSocket\");setGame(gameUpdate);}catch(err){console.error(\"Error parsing WebSocket message:\",err);}};socket.onclose=event=>{console.log(\"WebSocket connection closed:\",event);setWsConnected(false);// Start fallback polling with a delay\nif(gameId&&!pollingIntervalRef.current){console.log(\"WebSocket closed, setting up fallback polling\");startPolling(gameId);}};socket.onerror=error=>{console.error(\"WebSocket error:\",error);setWsConnected(false);};socketRef.current=socket;return socket;}catch(err){console.error(\"Error setting up WebSocket:\",err);return null;}},[stopPolling,startPolling]);// Function to create a new game\nconst createGame=useCallback(async function(playerId,username){let language=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'en';try{clearError();setLoading(true);console.log(\"Creating game with:\",{playerId,username,language});const response=await axios.post(`${API_URL}/api/game/start`,{player_id:playerId,username,language});console.log(\"Server response:\",response.data);setGame(response.data);// Set up WebSocket connection after creating the game\nsetupWebSocket(response.data.id);return response.data;}catch(err){var _err$response,_err$response$data;console.error(\"Error creating game:\",err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||\"Failed to create game\");return null;}finally{setLoading(false);}},[setupWebSocket,clearError]);// Function to join or load a game\nconst joinOrLoadGame=useCallback(async(gameId,playerId,username,team)=>{try{clearError();setLoading(true);// First try to join the game\nconst joinResponse=await axios.post(`${API_URL}/api/game/join`,{game_id:gameId,player_id:playerId,username,team});setGame(joinResponse.data);// Set up WebSocket connection after successfully joining\nsetupWebSocket(gameId);// Set up fallback polling only if WebSocket isn't connected yet\nif(!wsConnected){console.log(\"WebSocket not yet connected, setting up initial fallback polling\");// Delay the start of polling by a few seconds to give WebSocket a chance to connect\npollingTimeoutRef.current=setTimeout(()=>{if(!wsConnected){startPolling(gameId);}},3000);// Wait 3 seconds before starting polling\n}return joinResponse.data;}catch(err){var _err$response2,_err$response2$data;console.error(\"Error joining game:\",err);setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.message)||'Failed to join game');return null;}finally{setLoading(false);}},[setupWebSocket,wsConnected,startPolling,clearError]);// Function to reveal a card\nconst revealCard=useCallback(async(gameId,cardIndex)=>{try{clearError();setLoading(true);console.log(`Revealing card ${cardIndex} in game ${gameId}`);const response=await axios.post(`${API_URL}/api/game/reveal`,{game_id:gameId,card_index:cardIndex});setGame(response.data);return response.data;}catch(err){var _err$response3,_err$response3$data;console.error(\"Error revealing card:\",err);setError(((_err$response3=err.response)===null||_err$response3===void 0?void 0:(_err$response3$data=_err$response3.data)===null||_err$response3$data===void 0?void 0:_err$response3$data.message)||\"Failed to reveal card\");return null;}finally{setLoading(false);}},[clearError]);// Function to set a player as spymaster\nconst setSpymaster=useCallback(async(gameId,playerId)=>{try{clearError();setLoading(true);console.log(`Setting player ${playerId} as spymaster in game ${gameId}`);const response=await axios.post(`${API_URL}/api/game/set-spymaster`,{game_id:gameId,player_id:playerId});setGame(response.data);return response.data;}catch(err){var _err$response4,_err$response4$data;console.error(\"Error setting spymaster:\",err);setError(((_err$response4=err.response)===null||_err$response4===void 0?void 0:(_err$response4$data=_err$response4.data)===null||_err$response4$data===void 0?void 0:_err$response4$data.message)||\"Failed to set spymaster\");return null;}finally{setLoading(false);}},[clearError]);// Function to end the current team's turn\nconst endTurn=useCallback(async gameId=>{try{clearError();setLoading(true);console.log(`Ending turn in game ${gameId}`);const response=await axios.post(`${API_URL}/api/game/end-turn`,{game_id:gameId});setGame(response.data);return response.data;}catch(err){var _err$response5,_err$response5$data;console.error(\"Error ending turn:\",err);setError(((_err$response5=err.response)===null||_err$response5===void 0?void 0:(_err$response5$data=_err$response5.data)===null||_err$response5$data===void 0?void 0:_err$response5$data.message)||\"Failed to end turn\");return null;}finally{setLoading(false);}},[clearError]);// Function to change team with WebSocket reconnection\nconst changeTeam=async(gameId,playerId,team)=>{try{clearError();console.log(`Changing team for player ${playerId} to ${team} in game ${gameId}`);const response=await axios.post(`${API_URL}/api/game/change-team`,{game_id:gameId,player_id:playerId,team:team});console.log(\"Change team response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const updatedGame=response.data;setGame(updatedGame);// Re-establish WebSocket connection after team change\n// Give the server a moment to process the team change before reconnecting\nsetTimeout(()=>{console.log(\"Re-establishing WebSocket connection after team change\");setupWebSocket(gameId);},500);return updatedGame;}catch(err){var _err$response6,_err$response6$data;console.error('Error changing team:',err);setError(((_err$response6=err.response)===null||_err$response6===void 0?void 0:(_err$response6$data=_err$response6.data)===null||_err$response6$data===void 0?void 0:_err$response6$data.message)||'Failed to change team. Please try again.');return null;}};// Clean up all resources on unmount\nuseEffect(()=>{return()=>{console.log(\"Cleaning up GameContext resources\");if(socketRef.current){socketRef.current.close();socketRef.current=null;}if(pollingIntervalRef.current){clearInterval(pollingIntervalRef.current);pollingIntervalRef.current=null;}if(pollingTimeoutRef.current){clearTimeout(pollingTimeoutRef.current);pollingTimeoutRef.current=null;}};},[]);// Value object for the context provider\nconst contextValue={game,loading,error,clearError,createGame,joinOrLoadGame,revealCard,setSpymaster,endTurn,changeTeam,wsConnected};return/*#__PURE__*/_jsx(GameContext.Provider,{value:contextValue,children:children});};","map":{"version":3,"names":["React","createContext","useState","useCallback","useRef","useEffect","axios","API_URL","jsx","_jsx","GameContext","GameProvider","_ref","children","game","setGame","error","setError","loading","setLoading","wsConnected","setWsConnected","socketRef","pollingIntervalRef","pollingTimeoutRef","console","log","clearError","fetchGameState","gameId","response","get","data","err","stopPolling","current","clearInterval","startPolling","setInterval","setupWebSocket","close","userId","localStorage","getItem","wsProtocol","window","location","protocol","wsUrl","host","socket","WebSocket","onopen","onmessage","event","gameUpdate","JSON","parse","onclose","onerror","createGame","playerId","username","language","arguments","length","undefined","post","player_id","id","_err$response","_err$response$data","message","joinOrLoadGame","team","joinResponse","game_id","setTimeout","_err$response2","_err$response2$data","revealCard","cardIndex","card_index","_err$response3","_err$response3$data","setSpymaster","_err$response4","_err$response4$data","endTurn","_err$response5","_err$response5$data","changeTeam","updatedGame","_err$response6","_err$response6$data","clearTimeout","contextValue","Provider","value"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/context/GameContext.jsx"],"sourcesContent":["import React, { createContext, useState, useCallback, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport API_URL from '../config/api';\r\n\r\nexport const GameContext = createContext({});\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [game, setGame] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [wsConnected, setWsConnected] = useState(false);\r\n  const socketRef = useRef(null);\r\n  const pollingIntervalRef = useRef(null);\r\n  const pollingTimeoutRef = useRef(null);\r\n  \r\n  // For debugging\r\n  useEffect(() => {\r\n    console.log(\"WebSocket connected state:\", wsConnected);\r\n  }, [wsConnected]);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  // Function to fetch game state (polling)\r\n  const fetchGameState = useCallback(async (gameId) => {\r\n    if (!gameId) return;\r\n    \r\n    try {\r\n      console.log(\"Polling game state for:\", gameId);\r\n      const response = await axios.get(`${API_URL}/api/game/state?game_id=${gameId}`);\r\n      setGame(response.data);\r\n    } catch (err) {\r\n      console.error(\"Error fetching game state:\", err);\r\n    }\r\n  }, []);\r\n\r\n  // Stop polling function\r\n  const stopPolling = useCallback(() => {\r\n    if (pollingIntervalRef.current) {\r\n      console.log(\"Stopping polling\");\r\n      clearInterval(pollingIntervalRef.current);\r\n      pollingIntervalRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  // Start polling with rate limiting to prevent excessive requests\r\n  const startPolling = useCallback((gameId) => {\r\n    if (wsConnected) {\r\n      console.log(\"WebSocket connected, not starting polling\");\r\n      return;\r\n    }\r\n    \r\n    if (pollingIntervalRef.current) {\r\n      stopPolling();\r\n    }\r\n    \r\n    console.log(\"Starting polling for game:\", gameId);\r\n    // Use a longer interval (10 seconds) to reduce server load\r\n    pollingIntervalRef.current = setInterval(() => {\r\n      // Additional check to avoid polling when WebSocket is connected\r\n      if (!wsConnected && gameId) {\r\n        fetchGameState(gameId);\r\n      } else if (wsConnected) {\r\n        console.log(\"WebSocket now connected, stopping polling\");\r\n        stopPolling();\r\n      }\r\n    }, 10000); // 10 seconds\r\n  }, [fetchGameState, stopPolling, wsConnected]);\r\n\r\n  // Setup WebSocket connection with reconnection logic\r\n  const setupWebSocket = useCallback((gameId) => {\r\n    if (!gameId) return null;\r\n    \r\n    // Clean up any existing socket\r\n    if (socketRef.current) {\r\n      console.log(\"Closing existing WebSocket connection\");\r\n      socketRef.current.close();\r\n      socketRef.current = null;\r\n    }\r\n    \r\n    const userId = localStorage.getItem('userId');\r\n    // Use relative path for WebSocket URL to match the current host\r\n    const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\r\n    const wsUrl = `${wsProtocol}//${window.location.host}/ws/game/${gameId}?client_id=${userId}`;\r\n    \r\n    console.log(\"Setting up WebSocket connection to:\", wsUrl);\r\n    \r\n    try {\r\n      const socket = new WebSocket(wsUrl);\r\n      \r\n      socket.onopen = () => {\r\n        console.log(\"WebSocket connection established\");\r\n        setWsConnected(true);\r\n        stopPolling();\r\n      };\r\n      \r\n      socket.onmessage = (event) => {\r\n        try {\r\n          const gameUpdate = JSON.parse(event.data);\r\n          console.log(\"Received game update via WebSocket\");\r\n          setGame(gameUpdate);\r\n        } catch (err) {\r\n          console.error(\"Error parsing WebSocket message:\", err);\r\n        }\r\n      };\r\n      \r\n      socket.onclose = (event) => {\r\n        console.log(\"WebSocket connection closed:\", event);\r\n        setWsConnected(false);\r\n        \r\n        // Start fallback polling with a delay\r\n        if (gameId && !pollingIntervalRef.current) {\r\n          console.log(\"WebSocket closed, setting up fallback polling\");\r\n          startPolling(gameId);\r\n        }\r\n      };\r\n      \r\n      socket.onerror = (error) => {\r\n        console.error(\"WebSocket error:\", error);\r\n        setWsConnected(false);\r\n      };\r\n      \r\n      socketRef.current = socket;\r\n      return socket;\r\n    } catch (err) {\r\n      console.error(\"Error setting up WebSocket:\", err);\r\n      return null;\r\n    }\r\n  }, [stopPolling, startPolling]);\r\n\r\n  // Function to create a new game\r\n  const createGame = useCallback(async (playerId, username, language = 'en') => {\r\n    try {\r\n      clearError();\r\n      setLoading(true);\r\n      \r\n      console.log(\"Creating game with:\", { playerId, username, language });\r\n      \r\n      const response = await axios.post(`${API_URL}/api/game/start`, {\r\n        player_id: playerId,\r\n        username,\r\n        language\r\n      });\r\n      \r\n      console.log(\"Server response:\", response.data);\r\n      setGame(response.data);\r\n      \r\n      // Set up WebSocket connection after creating the game\r\n      setupWebSocket(response.data.id);\r\n      \r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error creating game:\", err);\r\n      setError(err.response?.data?.message || \"Failed to create game\");\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [setupWebSocket, clearError]);\r\n\r\n  // Function to join or load a game\r\n  const joinOrLoadGame = useCallback(async (gameId, playerId, username, team) => {\r\n    try {\r\n      clearError();\r\n      setLoading(true);\r\n      \r\n      // First try to join the game\r\n      const joinResponse = await axios.post(`${API_URL}/api/game/join`, {\r\n        game_id: gameId,\r\n        player_id: playerId,\r\n        username,\r\n        team\r\n      });\r\n      \r\n      setGame(joinResponse.data);\r\n      \r\n      // Set up WebSocket connection after successfully joining\r\n      setupWebSocket(gameId);\r\n      \r\n      // Set up fallback polling only if WebSocket isn't connected yet\r\n      if (!wsConnected) {\r\n        console.log(\"WebSocket not yet connected, setting up initial fallback polling\");\r\n        // Delay the start of polling by a few seconds to give WebSocket a chance to connect\r\n        pollingTimeoutRef.current = setTimeout(() => {\r\n          if (!wsConnected) {\r\n            startPolling(gameId);\r\n          }\r\n        }, 3000); // Wait 3 seconds before starting polling\r\n      }\r\n      \r\n      return joinResponse.data;\r\n    } catch (err) {\r\n      console.error(\"Error joining game:\", err);\r\n      setError(err.response?.data?.message || 'Failed to join game');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [setupWebSocket, wsConnected, startPolling, clearError]);\r\n\r\n  // Function to reveal a card\r\n  const revealCard = useCallback(async (gameId, cardIndex) => {\r\n    try {\r\n      clearError();\r\n      setLoading(true);\r\n      \r\n      console.log(`Revealing card ${cardIndex} in game ${gameId}`);\r\n      \r\n      const response = await axios.post(`${API_URL}/api/game/reveal`, {\r\n        game_id: gameId,\r\n        card_index: cardIndex\r\n      });\r\n      \r\n      setGame(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error revealing card:\", err);\r\n      setError(err.response?.data?.message || \"Failed to reveal card\");\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [clearError]);\r\n\r\n  // Function to set a player as spymaster\r\n  const setSpymaster = useCallback(async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      setLoading(true);\r\n      \r\n      console.log(`Setting player ${playerId} as spymaster in game ${gameId}`);\r\n      \r\n      const response = await axios.post(`${API_URL}/api/game/set-spymaster`, {\r\n        game_id: gameId,\r\n        player_id: playerId\r\n      });\r\n      \r\n      setGame(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error setting spymaster:\", err);\r\n      setError(err.response?.data?.message || \"Failed to set spymaster\");\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [clearError]);\r\n\r\n  // Function to end the current team's turn\r\n  const endTurn = useCallback(async (gameId) => {\r\n    try {\r\n      clearError();\r\n      setLoading(true);\r\n      \r\n      console.log(`Ending turn in game ${gameId}`);\r\n      \r\n      const response = await axios.post(`${API_URL}/api/game/end-turn`, {\r\n        game_id: gameId\r\n      });\r\n      \r\n      setGame(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error ending turn:\", err);\r\n      setError(err.response?.data?.message || \"Failed to end turn\");\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [clearError]);\r\n\r\n  // Function to change team with WebSocket reconnection\r\n  const changeTeam = async (gameId, playerId, team) => {\r\n    try {\r\n      clearError();\r\n      console.log(`Changing team for player ${playerId} to ${team} in game ${gameId}`);\r\n      \r\n      const response = await axios.post(`${API_URL}/api/game/change-team`, {\r\n        game_id: gameId,\r\n        player_id: playerId,\r\n        team: team\r\n      });\r\n      \r\n      console.log(\"Change team response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const updatedGame = response.data;\r\n      setGame(updatedGame);\r\n      \r\n      // Re-establish WebSocket connection after team change\r\n      // Give the server a moment to process the team change before reconnecting\r\n      setTimeout(() => {\r\n        console.log(\"Re-establishing WebSocket connection after team change\");\r\n        setupWebSocket(gameId);\r\n      }, 500);\r\n      \r\n      return updatedGame;\r\n    } catch (err) {\r\n      console.error('Error changing team:', err);\r\n      setError(err.response?.data?.message || 'Failed to change team. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Clean up all resources on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      console.log(\"Cleaning up GameContext resources\");\r\n      if (socketRef.current) {\r\n        socketRef.current.close();\r\n        socketRef.current = null;\r\n      }\r\n      \r\n      if (pollingIntervalRef.current) {\r\n        clearInterval(pollingIntervalRef.current);\r\n        pollingIntervalRef.current = null;\r\n      }\r\n      \r\n      if (pollingTimeoutRef.current) {\r\n        clearTimeout(pollingTimeoutRef.current);\r\n        pollingTimeoutRef.current = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Value object for the context provider\r\n  const contextValue = {\r\n    game,\r\n    loading,\r\n    error,\r\n    clearError,\r\n    createGame,\r\n    joinOrLoadGame,\r\n    revealCard,\r\n    setSpymaster,\r\n    endTurn,\r\n    changeTeam,\r\n    wsConnected\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={contextValue}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}