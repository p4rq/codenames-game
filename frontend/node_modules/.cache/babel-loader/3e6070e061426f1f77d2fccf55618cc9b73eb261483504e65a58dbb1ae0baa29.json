{"ast":null,"code":"import React,{createContext,useState,useContext,useCallback,useEffect}from'react';import axios from'axios';import{UserContext}from'./UserContext';import{jsx as _jsx}from\"react/jsx-runtime\";export const GameContext=/*#__PURE__*/createContext();// Define API base URL with the /api prefix\nconst API_URL='/api';// Add request/response interceptors for debugging\naxios.interceptors.request.use(config=>{console.log('API Request:',{method:config.method,url:config.url,data:config.data});return config;},error=>{console.error('API Request Error:',error);return Promise.reject(error);});axios.interceptors.response.use(response=>{console.log('API Response:',{status:response.status,data:response.data});return response;},error=>{var _error$response,_error$response2;console.error('API Response Error:',{status:(_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status,data:(_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data});return Promise.reject(error);});// Create WebSocket connection management in the provider\nexport const GameProvider=_ref=>{let{children}=_ref;const[game,setGame]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[gameWebSocket,setGameWebSocket]=useState(null);const[wsConnected,setWsConnected]=useState(false);const{user,updateUser}=useContext(UserContext);// Connect to game WebSocket\nconst connectGameWebSocket=useCallback(gameId=>{if(!gameId||!(user!==null&&user!==void 0&&user.id))return;// Close existing connection if any\nif(gameWebSocket&&gameWebSocket.readyState!==WebSocket.CLOSED){console.log(\"Closing existing WebSocket connection\");gameWebSocket.close();}// Use player_id parameter as expected by backend\nconst wsUrl=`ws://${window.location.host}/ws/game?game_id=${gameId}&player_id=${user.id}`;console.log(`Connecting to WebSocket at ${wsUrl}`);const ws=new WebSocket(wsUrl);ws.onopen=()=>{console.log(\"Game WebSocket connection established\");setWsConnected(true);};ws.onmessage=event=>{try{const data=JSON.parse(event.data);console.log(\"WebSocket message received:\",data);if(data.type==='game_update'){console.log(\"Game update received\",data.game);setGame(data.game);}else if(data.type==='error'){console.error(\"WebSocket error:\",data.message);setError(data.message);}}catch(err){console.error(\"Error processing WebSocket message:\",err);}};ws.onclose=()=>{console.log(\"Game WebSocket connection closed\");setWsConnected(false);// Auto-reconnect with exponential backoff\nsetTimeout(()=>{console.log(\"Attempting to reconnect WebSocket...\");connectGameWebSocket(gameId);},3000);};ws.onerror=error=>{console.error(\"Game WebSocket error:\",error);setError(\"WebSocket connection error\");};setGameWebSocket(ws);return ws;},[user===null||user===void 0?void 0:user.id]);// Clean up WebSocket connection on unmount\nuseEffect(()=>{return()=>{if(gameWebSocket){console.log(\"Cleaning up WebSocket connection\");gameWebSocket.close();}};},[gameWebSocket]);// Fetch game data\nconst fetchGame=async gameId=>{setLoading(true);setError(null);try{const response=await axios.get(`/api/game/state?id=${gameId}`);setGame(response.data);return response.data;}catch(err){setError(`Failed to fetch game: ${err.message}`);return null;}finally{setLoading(false);}};// Handle team change\nconst handleTeamChange=async(gameId,team)=>{if(!user||!gameId)return;try{console.log(`Changing team for player ${user.id} to ${team} in game ${gameId}`);// Use the correct API endpoint with better debugging\nconsole.log(\"Sending payload:\",{game_id:gameId,player_id:user.id,team});const response=await axios.post('/api/game/change-team',{game_id:gameId,player_id:user.id,team:team},{headers:{'Content-Type':'application/json','Accept':'application/json'}});// Check response type\nif(typeof response.data==='string'&&response.data.includes('<!doctype html>')){console.error('Received HTML response instead of JSON. API route may be misconfigured.',response.data.substring(0,100));// API failed, at least update the UI\nconsole.log(\"API failed, updating UI only\");// Update user context directly\nupdateUser({team:team});// Update local game state for immediate feedback\nif(game&&game.players){const updatedGame={...game};const playerIndex=updatedGame.players.findIndex(p=>p.id===user.id);if(playerIndex>=0){updatedGame.players[playerIndex].team=team;setGame(updatedGame);}}}else{// API succeeded\nsetGame(response.data);updateUser({team:team});}console.log(`Team changed to ${team} for user ${user.username}`);return true;}catch(error){console.error('Error changing team:',error);// Still update UI for better UX even if API fails\nupdateUser({team:team});return false;}};// Reveal a card\nconst revealCard=async(gameId,cardIndex)=>{if(!gameId)return null;try{const response=await axios.post('/api/game/reveal',{game_id:gameId,card_index:cardIndex,player_id:user===null||user===void 0?void 0:user.id});setGame(response.data);return response.data;}catch(err){setError(`Failed to reveal card: ${err.message}`);return null;}};// Set spymaster\nconst setSpymaster=async(gameId,playerId)=>{try{const response=await axios.post('/api/game/set-spymaster',{game_id:gameId,player_id:playerId});setGame(response.data);return response.data;}catch(err){setError(`Failed to set spymaster: ${err.message}`);return null;}};// End turn\nconst endTurn=async gameId=>{try{const response=await axios.post('/api/game/end-turn',{game_id:gameId,player_id:user===null||user===void 0?void 0:user.id});setGame(response.data);return response.data;}catch(err){setError(`Failed to end turn: ${err.message}`);return null;}};// Start a new game\nconst startGame=async()=>{setLoading(true);setError(null);try{console.log(`Starting new game for player: ${user===null||user===void 0?void 0:user.id}, ${user===null||user===void 0?void 0:user.username}`);const response=await axios.post('/api/game/start',{creator_id:user===null||user===void 0?void 0:user.id,username:user===null||user===void 0?void 0:user.username});console.log(\"Server response:\",response.data);setGame(response.data);return response.data;}catch(err){setError(`Failed to start game: ${err.message}`);return null;}finally{setLoading(false);}};// Join an existing game\nconst joinGame=async(gameId,username)=>{setLoading(true);setError(null);try{const response=await axios.post('/api/game/join',{game_id:gameId,player_id:user===null||user===void 0?void 0:user.id,username:username||(user===null||user===void 0?void 0:user.username)});setGame(response.data);return response.data;}catch(err){setError(`Failed to join game: ${err.message}`);return null;}finally{setLoading(false);}};return/*#__PURE__*/_jsx(GameContext.Provider,{value:{game,setGame,loading,error,setError,fetchGame,startGame,joinGame,handleTeamChange,revealCard,setSpymaster,endTurn,gameWebSocket,wsConnected,connectGameWebSocket},children:children});};","map":{"version":3,"names":["React","createContext","useState","useContext","useCallback","useEffect","axios","UserContext","jsx","_jsx","GameContext","API_URL","interceptors","request","use","config","console","log","method","url","data","error","Promise","reject","response","status","_error$response","_error$response2","GameProvider","_ref","children","game","setGame","loading","setLoading","setError","gameWebSocket","setGameWebSocket","wsConnected","setWsConnected","user","updateUser","connectGameWebSocket","gameId","id","readyState","WebSocket","CLOSED","close","wsUrl","window","location","host","ws","onopen","onmessage","event","JSON","parse","type","message","err","onclose","setTimeout","onerror","fetchGame","get","handleTeamChange","team","game_id","player_id","post","headers","includes","substring","players","updatedGame","playerIndex","findIndex","p","username","revealCard","cardIndex","card_index","setSpymaster","playerId","endTurn","startGame","creator_id","joinGame","Provider","value"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/context/GameContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useCallback, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { UserContext } from './UserContext';\r\n\r\nexport const GameContext = createContext();\r\n\r\n// Define API base URL with the /api prefix\r\nconst API_URL = '/api';\r\n\r\n// Add request/response interceptors for debugging\r\naxios.interceptors.request.use(\r\n  config => {\r\n    console.log('API Request:', {\r\n      method: config.method,\r\n      url: config.url,\r\n      data: config.data\r\n    });\r\n    return config;\r\n  },\r\n  error => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxios.interceptors.response.use(\r\n  response => {\r\n    console.log('API Response:', {\r\n      status: response.status,\r\n      data: response.data\r\n    });\r\n    return response;\r\n  },\r\n  error => {\r\n    console.error('API Response Error:', {\r\n      status: error.response?.status,\r\n      data: error.response?.data\r\n    });\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Create WebSocket connection management in the provider\r\nexport const GameProvider = ({ children }) => {\r\n  const [game, setGame] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [gameWebSocket, setGameWebSocket] = useState(null);\r\n  const [wsConnected, setWsConnected] = useState(false);\r\n  \r\n  const { user, updateUser } = useContext(UserContext);\r\n\r\n  // Connect to game WebSocket\r\n  const connectGameWebSocket = useCallback((gameId) => {\r\n    if (!gameId || !user?.id) return;\r\n\r\n    // Close existing connection if any\r\n    if (gameWebSocket && gameWebSocket.readyState !== WebSocket.CLOSED) {\r\n      console.log(\"Closing existing WebSocket connection\");\r\n      gameWebSocket.close();\r\n    }\r\n\r\n    // Use player_id parameter as expected by backend\r\n    const wsUrl = `ws://${window.location.host}/ws/game?game_id=${gameId}&player_id=${user.id}`;\r\n    console.log(`Connecting to WebSocket at ${wsUrl}`);\r\n    \r\n    const ws = new WebSocket(wsUrl);\r\n    \r\n    ws.onopen = () => {\r\n      console.log(\"Game WebSocket connection established\");\r\n      setWsConnected(true);\r\n    };\r\n    \r\n    ws.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        console.log(\"WebSocket message received:\", data);\r\n        \r\n        if (data.type === 'game_update') {\r\n          console.log(\"Game update received\", data.game);\r\n          setGame(data.game);\r\n        } else if (data.type === 'error') {\r\n          console.error(\"WebSocket error:\", data.message);\r\n          setError(data.message);\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error processing WebSocket message:\", err);\r\n      }\r\n    };\r\n    \r\n    ws.onclose = () => {\r\n      console.log(\"Game WebSocket connection closed\");\r\n      setWsConnected(false);\r\n      \r\n      // Auto-reconnect with exponential backoff\r\n      setTimeout(() => {\r\n        console.log(\"Attempting to reconnect WebSocket...\");\r\n        connectGameWebSocket(gameId);\r\n      }, 3000);\r\n    };\r\n    \r\n    ws.onerror = (error) => {\r\n      console.error(\"Game WebSocket error:\", error);\r\n      setError(\"WebSocket connection error\");\r\n    };\r\n    \r\n    setGameWebSocket(ws);\r\n    return ws;\r\n  }, [user?.id]);\r\n\r\n  // Clean up WebSocket connection on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (gameWebSocket) {\r\n        console.log(\"Cleaning up WebSocket connection\");\r\n        gameWebSocket.close();\r\n      }\r\n    };\r\n  }, [gameWebSocket]);\r\n\r\n  // Fetch game data\r\n  const fetchGame = async (gameId) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.get(`/api/game/state?id=${gameId}`);\r\n      setGame(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(`Failed to fetch game: ${err.message}`);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle team change\r\n  const handleTeamChange = async (gameId, team) => {\r\n    if (!user || !gameId) return;\r\n\r\n    try {\r\n      console.log(`Changing team for player ${user.id} to ${team} in game ${gameId}`);\r\n      \r\n      // Use the correct API endpoint with better debugging\r\n      console.log(\"Sending payload:\", { game_id: gameId, player_id: user.id, team });\r\n      \r\n      const response = await axios.post('/api/game/change-team', {\r\n        game_id: gameId,\r\n        player_id: user.id,\r\n        team: team\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        }\r\n      });\r\n      \r\n      // Check response type\r\n      if (typeof response.data === 'string' && response.data.includes('<!doctype html>')) {\r\n        console.error('Received HTML response instead of JSON. API route may be misconfigured.', \r\n          response.data.substring(0, 100));\r\n          \r\n        // API failed, at least update the UI\r\n        console.log(\"API failed, updating UI only\");\r\n        \r\n        // Update user context directly\r\n        updateUser({ team: team });\r\n        \r\n        // Update local game state for immediate feedback\r\n        if (game && game.players) {\r\n          const updatedGame = { ...game };\r\n          const playerIndex = updatedGame.players.findIndex(p => p.id === user.id);\r\n          \r\n          if (playerIndex >= 0) {\r\n            updatedGame.players[playerIndex].team = team;\r\n            setGame(updatedGame);\r\n          }\r\n        }\r\n      } else {\r\n        // API succeeded\r\n        setGame(response.data);\r\n        updateUser({ team: team });\r\n      }\r\n      \r\n      console.log(`Team changed to ${team} for user ${user.username}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error changing team:', error);\r\n      \r\n      // Still update UI for better UX even if API fails\r\n      updateUser({ team: team });\r\n      \r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Reveal a card\r\n  const revealCard = async (gameId, cardIndex) => {\r\n    if (!gameId) return null;\r\n    \r\n    try {\r\n      const response = await axios.post('/api/game/reveal', {\r\n        game_id: gameId,\r\n        card_index: cardIndex,\r\n        player_id: user?.id\r\n      });\r\n      \r\n      setGame(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(`Failed to reveal card: ${err.message}`);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Set spymaster\r\n  const setSpymaster = async (gameId, playerId) => {\r\n    try {\r\n      const response = await axios.post('/api/game/set-spymaster', {\r\n        game_id: gameId,\r\n        player_id: playerId\r\n      });\r\n      \r\n      setGame(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(`Failed to set spymaster: ${err.message}`);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // End turn\r\n  const endTurn = async (gameId) => {\r\n    try {\r\n      const response = await axios.post('/api/game/end-turn', {\r\n        game_id: gameId,\r\n        player_id: user?.id\r\n      });\r\n      \r\n      setGame(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(`Failed to end turn: ${err.message}`);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Start a new game\r\n  const startGame = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log(`Starting new game for player: ${user?.id}, ${user?.username}`);\r\n      \r\n      const response = await axios.post('/api/game/start', {\r\n        creator_id: user?.id,\r\n        username: user?.username\r\n      });\r\n      \r\n      console.log(\"Server response:\", response.data);\r\n      setGame(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(`Failed to start game: ${err.message}`);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Join an existing game\r\n  const joinGame = async (gameId, username) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.post('/api/game/join', {\r\n        game_id: gameId,\r\n        player_id: user?.id,\r\n        username: username || user?.username\r\n      });\r\n      \r\n      setGame(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(`Failed to join game: ${err.message}`);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider\r\n      value={{\r\n        game,\r\n        setGame,\r\n        loading,\r\n        error,\r\n        setError,\r\n        fetchGame,\r\n        startGame,\r\n        joinGame,\r\n        handleTeamChange,\r\n        revealCard,\r\n        setSpymaster,\r\n        endTurn,\r\n        gameWebSocket,\r\n        wsConnected,\r\n        connectGameWebSocket\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}