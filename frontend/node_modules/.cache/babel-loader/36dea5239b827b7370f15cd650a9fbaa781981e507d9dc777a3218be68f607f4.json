{"ast":null,"code":"import React,{createContext,useState,useRef,useEffect}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";export const GameContext=/*#__PURE__*/createContext();// Define API base URL with the /api prefix\nconst API_URL='/api';// First, create a separate function to manage the WebSocket connection:\nfunction setupWebSocket(gameId,setGame){if(!gameId)return null;const wsUrl=`ws://${window.location.host}/ws/game/${gameId}?client_id=${localStorage.getItem('userId')}`;console.log(\"Setting up WebSocket connection to:\",wsUrl);const socket=new WebSocket(wsUrl);socket.onopen=()=>{console.log(\"WebSocket connection established\");};socket.onmessage=event=>{try{const gameUpdate=JSON.parse(event.data);console.log(\"Received game update via WebSocket:\",gameUpdate);setGame(gameUpdate);}catch(err){console.error(\"Error parsing WebSocket message:\",err);}};socket.onclose=event=>{console.log(\"WebSocket connection closed:\",event);};socket.onerror=error=>{console.error(\"WebSocket error:\",error);};return socket;}export const GameProvider=_ref=>{let{children}=_ref;const[error,setError]=useState(null);const[game,setGame]=useState({id:null,cards:[],players:[],current_turn:null,red_cards_left:0,blue_cards_left:0,winning_team:null});const socketRef=useRef(null);const clearError=()=>setError(null);const startNewGame=async(userId,username)=>{try{clearError();console.log(\"Creating game with:\",{userId,username});const response=await axios.post(`${API_URL}/game/start`,{creator_id:userId,username:username});console.log(\"Server response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const newGame=response.data;setGame(newGame);return newGame;}catch(err){var _err$response;console.error(\"Error creating game:\",err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.data)||'Failed to create game. Please try again.');return null;}};const joinExistingGame=async(gameId,userId,username,team)=>{try{clearError();console.log(\"Joining game:\",{gameId,userId,username,team});const response=await axios.post(`${API_URL}/game/join`,{game_id:gameId,player_id:userId,username:username,team:team});console.log(\"Join game response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const joinedGame=response.data;setGame(joinedGame);return joinedGame;}catch(err){var _err$response2;console.error(\"Error joining game:\",err);setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:_err$response2.data)||'Failed to join game. Please try again.');return null;}};const getGameState=async gameId=>{try{clearError();const response=await axios.get(`${API_URL}/game/state?id=${gameId}`);return response.data;}catch(err){var _err$response3;console.error(\"Error fetching game state:\",err);setError(((_err$response3=err.response)===null||_err$response3===void 0?void 0:_err$response3.data)||'Failed to load game.');return null;}};const revealCard=async(gameId,cardId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/reveal`,{game_id:gameId,card_id:cardId,player_id:playerId});return response.data;}catch(err){var _err$response4;console.error(\"Error revealing card:\",err);setError(((_err$response4=err.response)===null||_err$response4===void 0?void 0:_err$response4.data)||'Failed to reveal card.');return null;}};const setSpymaster=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/set-spymaster?game_id=${gameId}&player_id=${playerId}`);return response.data;}catch(err){var _err$response5;console.error(\"Error setting spymaster:\",err);setError(((_err$response5=err.response)===null||_err$response5===void 0?void 0:_err$response5.data)||'Failed to become spymaster.');return null;}};const endTurn=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/end-turn?game_id=${gameId}&player_id=${playerId}`);return response.data;}catch(err){var _err$response6;console.error(\"Error ending turn:\",err);setError(((_err$response6=err.response)===null||_err$response6===void 0?void 0:_err$response6.data)||'Failed to end turn.');return null;}};// Cleanup function for WebSocket\nconst cleanupWebSocket=()=>{if(socketRef.current&&socketRef.current.readyState===WebSocket.OPEN){console.log(\"Closing WebSocket connection\");socketRef.current.close();socketRef.current=null;}};// Function to establish new WebSocket connection\nconst reconnectWebSocket=gameId=>{cleanupWebSocket();if(gameId){socketRef.current=setupWebSocket(gameId,setGame);}};// Updated to use consistent API pattern and axios\nconst changeTeam=async(gameId,playerId,team)=>{try{clearError();console.log(`Changing team for player ${playerId} to ${team} in game ${gameId}`);// Update the URL to match your backend route without the /api prefix\nconst response=await axios.post(`${API_URL}/game/change-team`,{game_id:gameId,player_id:playerId,team:team});console.log(\"Change team response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const updatedGame=response.data;setGame(updatedGame);// Reconnect WebSocket after team change\nreconnectWebSocket(gameId);return updatedGame;}catch(err){var _err$response7,_err$response7$data;console.error('Error changing team:',err);if(err.response){console.error('Error response:',{status:err.response.status,headers:err.response.headers,data:err.response.data});}setError(((_err$response7=err.response)===null||_err$response7===void 0?void 0:(_err$response7$data=_err$response7.data)===null||_err$response7$data===void 0?void 0:_err$response7$data.message)||'Failed to change team. Please try again.');return null;}};// Setup WebSocket when game changes\nuseEffect(()=>{if(game!==null&&game!==void 0&&game.id){// Only set up WebSocket if it doesn't exist yet\nif(!socketRef.current){socketRef.current=setupWebSocket(game.id,setGame);}}// Cleanup WebSocket on unmount\nreturn()=>cleanupWebSocket();},[game===null||game===void 0?void 0:game.id]);// Update the provider value with all functions\nreturn/*#__PURE__*/_jsx(GameContext.Provider,{value:{game,error,startNewGame,joinExistingGame,getGameState,revealCard,setSpymaster,endTurn,changeTeam},children:children});};","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","axios","jsx","_jsx","GameContext","API_URL","setupWebSocket","gameId","setGame","wsUrl","window","location","host","localStorage","getItem","console","log","socket","WebSocket","onopen","onmessage","event","gameUpdate","JSON","parse","data","err","error","onclose","onerror","GameProvider","_ref","children","setError","game","id","cards","players","current_turn","red_cards_left","blue_cards_left","winning_team","socketRef","clearError","startNewGame","userId","username","response","post","creator_id","newGame","_err$response","joinExistingGame","team","game_id","player_id","joinedGame","_err$response2","getGameState","get","_err$response3","revealCard","cardId","playerId","card_id","_err$response4","setSpymaster","_err$response5","endTurn","_err$response6","cleanupWebSocket","current","readyState","OPEN","close","reconnectWebSocket","changeTeam","updatedGame","_err$response7","_err$response7$data","status","headers","message","Provider","value"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/context/GameContext.jsx"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const GameContext = createContext();\r\n\r\n// Define API base URL with the /api prefix\r\nconst API_URL = '/api';\r\n\r\n// First, create a separate function to manage the WebSocket connection:\r\nfunction setupWebSocket(gameId, setGame) {\r\n  if (!gameId) return null;\r\n  \r\n  const wsUrl = `ws://${window.location.host}/ws/game/${gameId}?client_id=${localStorage.getItem('userId')}`;\r\n  \r\n  console.log(\"Setting up WebSocket connection to:\", wsUrl);\r\n  const socket = new WebSocket(wsUrl);\r\n  \r\n  socket.onopen = () => {\r\n    console.log(\"WebSocket connection established\");\r\n  };\r\n  \r\n  socket.onmessage = (event) => {\r\n    try {\r\n      const gameUpdate = JSON.parse(event.data);\r\n      console.log(\"Received game update via WebSocket:\", gameUpdate);\r\n      setGame(gameUpdate);\r\n    } catch (err) {\r\n      console.error(\"Error parsing WebSocket message:\", err);\r\n    }\r\n  };\r\n  \r\n  socket.onclose = (event) => {\r\n    console.log(\"WebSocket connection closed:\", event);\r\n  };\r\n  \r\n  socket.onerror = (error) => {\r\n    console.error(\"WebSocket error:\", error);\r\n  };\r\n  \r\n  return socket;\r\n}\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [error, setError] = useState(null);\r\n  const [game, setGame] = useState({\r\n    id: null,\r\n    cards: [],\r\n    players: [],\r\n    current_turn: null,\r\n    red_cards_left: 0,\r\n    blue_cards_left: 0,\r\n    winning_team: null\r\n  });\r\n  const socketRef = useRef(null);\r\n  \r\n  const clearError = () => setError(null);\r\n\r\n  const startNewGame = async (userId, username) => {\r\n    try {\r\n      clearError();\r\n      console.log(\"Creating game with:\", { userId, username });\r\n      \r\n      const response = await axios.post(`${API_URL}/game/start`, {\r\n        creator_id: userId,\r\n        username: username\r\n      });\r\n      \r\n      console.log(\"Server response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const newGame = response.data;\r\n      setGame(newGame);\r\n      return newGame;\r\n    } catch (err) {\r\n      console.error(\"Error creating game:\", err);\r\n      setError(err.response?.data || 'Failed to create game. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const joinExistingGame = async (gameId, userId, username, team) => {\r\n    try {\r\n      clearError();\r\n      console.log(\"Joining game:\", { gameId, userId, username, team });\r\n      \r\n      const response = await axios.post(`${API_URL}/game/join`, {\r\n        game_id: gameId,\r\n        player_id: userId,\r\n        username: username,\r\n        team: team\r\n      });\r\n      \r\n      console.log(\"Join game response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const joinedGame = response.data;\r\n      setGame(joinedGame);\r\n      return joinedGame;\r\n    } catch (err) {\r\n      console.error(\"Error joining game:\", err);\r\n      setError(err.response?.data || 'Failed to join game. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getGameState = async (gameId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.get(`${API_URL}/game/state?id=${gameId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error fetching game state:\", err);\r\n      setError(err.response?.data || 'Failed to load game.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const revealCard = async (gameId, cardId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/reveal`, {\r\n        game_id: gameId,\r\n        card_id: cardId,\r\n        player_id: playerId\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error revealing card:\", err);\r\n      setError(err.response?.data || 'Failed to reveal card.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const setSpymaster = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/set-spymaster?game_id=${gameId}&player_id=${playerId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error setting spymaster:\", err);\r\n      setError(err.response?.data || 'Failed to become spymaster.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const endTurn = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/end-turn?game_id=${gameId}&player_id=${playerId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error ending turn:\", err);\r\n      setError(err.response?.data || 'Failed to end turn.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Cleanup function for WebSocket\r\n  const cleanupWebSocket = () => {\r\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n      console.log(\"Closing WebSocket connection\");\r\n      socketRef.current.close();\r\n      socketRef.current = null;\r\n    }\r\n  };\r\n  \r\n  // Function to establish new WebSocket connection\r\n  const reconnectWebSocket = (gameId) => {\r\n    cleanupWebSocket();\r\n    if (gameId) {\r\n      socketRef.current = setupWebSocket(gameId, setGame);\r\n    }\r\n  };\r\n  \r\n  // Updated to use consistent API pattern and axios\r\n  const changeTeam = async (gameId, playerId, team) => {\r\n    try {\r\n      clearError();\r\n      console.log(`Changing team for player ${playerId} to ${team} in game ${gameId}`);\r\n      \r\n      // Update the URL to match your backend route without the /api prefix\r\n      const response = await axios.post(`${API_URL}/game/change-team`, {\r\n        game_id: gameId,\r\n        player_id: playerId,\r\n        team: team\r\n      });\r\n      \r\n      console.log(\"Change team response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const updatedGame = response.data;\r\n      setGame(updatedGame);\r\n      \r\n      // Reconnect WebSocket after team change\r\n      reconnectWebSocket(gameId);\r\n      \r\n      return updatedGame;\r\n    } catch (err) {\r\n      console.error('Error changing team:', err);\r\n      if (err.response) {\r\n        console.error('Error response:', {\r\n          status: err.response.status,\r\n          headers: err.response.headers,\r\n          data: err.response.data\r\n        });\r\n      }\r\n      setError(err.response?.data?.message || 'Failed to change team. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Setup WebSocket when game changes\r\n  useEffect(() => {\r\n    if (game?.id) {\r\n      // Only set up WebSocket if it doesn't exist yet\r\n      if (!socketRef.current) {\r\n        socketRef.current = setupWebSocket(game.id, setGame);\r\n      }\r\n    }\r\n    \r\n    // Cleanup WebSocket on unmount\r\n    return () => cleanupWebSocket();\r\n  }, [game?.id]);\r\n  \r\n  // Update the provider value with all functions\r\n  return (\r\n    <GameContext.Provider \r\n      value={{ \r\n        game, \r\n        error, \r\n        startNewGame, \r\n        joinExistingGame,\r\n        getGameState, \r\n        revealCard, \r\n        setSpymaster, \r\n        endTurn,\r\n        changeTeam\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}