{"ast":null,"code":"import React,{createContext,useState}from'react';import axios from'axios';// Create context\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const GameContext=/*#__PURE__*/createContext();// API URL\nconst API_URL='/api';export const GameProvider=_ref=>{let{children}=_ref;const[error,setError]=useState(null);const[game,setGame]=useState(null);// Clear error\nconst clearError=()=>setError(null);// Create a new game\nconst startNewGame=async(userId,username)=>{try{clearError();const response=await axios.post(`${API_URL}/game/start`,{creator_id:userId,username:username});const newGame=response.data;setGame(newGame);return newGame;}catch(err){var _err$response,_err$response$data;setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||'Failed to create game. Please try again.');return null;}};// Join existing game\nconst joinExistingGame=async(gameId,userId,username,team)=>{try{clearError();const response=await axios.post(`${API_URL}/game/join`,{game_id:gameId,player_id:userId,username:username,team:team});const joinedGame=response.data;setGame(joinedGame);return joinedGame;}catch(err){var _err$response2,_err$response2$data;setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.message)||'Failed to join game. Please check the game code and try again.');return null;}};// Get game state\nconst getGameState=async gameId=>{try{clearError();const response=await axios.get(`${API_URL}/game/state`,{params:{id:gameId}});const gameState=response.data;setGame(gameState);return gameState;}catch(err){var _err$response3,_err$response3$data;setError(((_err$response3=err.response)===null||_err$response3===void 0?void 0:(_err$response3$data=_err$response3.data)===null||_err$response3$data===void 0?void 0:_err$response3$data.message)||'Failed to get game state.');return null;}};// Reveal card\nconst revealCard=async(gameId,cardId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/reveal`,{game_id:gameId,card_id:cardId,player_id:playerId});const updatedGame=response.data;setGame(updatedGame);return updatedGame;}catch(err){var _err$response4,_err$response4$data;setError(((_err$response4=err.response)===null||_err$response4===void 0?void 0:(_err$response4$data=_err$response4.data)===null||_err$response4$data===void 0?void 0:_err$response4$data.message)||'Failed to reveal card.');return null;}};// Set player as spymaster\nconst setSpymaster=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/set-spymaster`,null,{params:{game_id:gameId,player_id:playerId}});const updatedGame=response.data;setGame(updatedGame);return updatedGame;}catch(err){var _err$response5,_err$response5$data;setError(((_err$response5=err.response)===null||_err$response5===void 0?void 0:(_err$response5$data=_err$response5.data)===null||_err$response5$data===void 0?void 0:_err$response5$data.message)||'Failed to set spymaster.');return null;}};// End current team's turn\nconst endTurn=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/end-turn`,null,{params:{game_id:gameId,player_id:playerId}});const updatedGame=response.data;setGame(updatedGame);return updatedGame;}catch(err){var _err$response6,_err$response6$data;setError(((_err$response6=err.response)===null||_err$response6===void 0?void 0:(_err$response6$data=_err$response6.data)===null||_err$response6$data===void 0?void 0:_err$response6$data.message)||'Failed to end turn.');return null;}};return/*#__PURE__*/_jsx(GameContext.Provider,{value:{game,error,startNewGame,joinExistingGame,getGameState,revealCard,setSpymaster,endTurn,clearError},children:children});};","map":{"version":3,"names":["React","createContext","useState","axios","jsx","_jsx","GameContext","API_URL","GameProvider","_ref","children","error","setError","game","setGame","clearError","startNewGame","userId","username","response","post","creator_id","newGame","data","err","_err$response","_err$response$data","message","joinExistingGame","gameId","team","game_id","player_id","joinedGame","_err$response2","_err$response2$data","getGameState","get","params","id","gameState","_err$response3","_err$response3$data","revealCard","cardId","playerId","card_id","updatedGame","_err$response4","_err$response4$data","setSpymaster","_err$response5","_err$response5$data","endTurn","_err$response6","_err$response6$data","Provider","value"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/context/GameContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create context\r\nexport const GameContext = createContext();\r\n\r\n// API URL\r\nconst API_URL = '/api';\r\nexport const GameProvider = ({ children }) => {\r\n  const [error, setError] = useState(null);\r\n  const [game, setGame] = useState(null);\r\n  \r\n  // Clear error\r\n  const clearError = () => setError(null);\r\n  \r\n  // Create a new game\r\n  const startNewGame = async (userId, username) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/start`, {\r\n        creator_id: userId,\r\n        username: username\r\n      });\r\n      \r\n      const newGame = response.data;\r\n      setGame(newGame);\r\n      return newGame;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to create game. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Join existing game\r\n  const joinExistingGame = async (gameId, userId, username, team) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/join`, {\r\n        game_id: gameId,\r\n        player_id: userId,\r\n        username: username,\r\n        team: team\r\n      });\r\n      \r\n      const joinedGame = response.data;\r\n      setGame(joinedGame);\r\n      return joinedGame;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to join game. Please check the game code and try again.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Get game state\r\n  const getGameState = async (gameId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.get(`${API_URL}/game/state`, { \r\n        params: { id: gameId } \r\n      });\r\n      \r\n      const gameState = response.data;\r\n      setGame(gameState);\r\n      return gameState;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to get game state.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Reveal card\r\n  const revealCard = async (gameId, cardId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/reveal`, {\r\n        game_id: gameId,\r\n        card_id: cardId,\r\n        player_id: playerId\r\n      });\r\n      \r\n      const updatedGame = response.data;\r\n      setGame(updatedGame);\r\n      return updatedGame;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to reveal card.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Set player as spymaster\r\n  const setSpymaster = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/set-spymaster`, null, {\r\n        params: {\r\n          game_id: gameId,\r\n          player_id: playerId\r\n        }\r\n      });\r\n      \r\n      const updatedGame = response.data;\r\n      setGame(updatedGame);\r\n      return updatedGame;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to set spymaster.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // End current team's turn\r\n  const endTurn = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/end-turn`, null, {\r\n        params: {\r\n          game_id: gameId,\r\n          player_id: playerId\r\n        }\r\n      });\r\n      \r\n      const updatedGame = response.data;\r\n      setGame(updatedGame);\r\n      return updatedGame;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Failed to end turn.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GameContext.Provider value={{ \r\n      game,\r\n      error,\r\n      startNewGame,\r\n      joinExistingGame,\r\n      getGameState,\r\n      revealCard,\r\n      setSpymaster,\r\n      endTurn,\r\n      clearError\r\n    }}>\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}