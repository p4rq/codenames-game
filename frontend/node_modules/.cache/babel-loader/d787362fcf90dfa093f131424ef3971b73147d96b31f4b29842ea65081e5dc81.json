{"ast":null,"code":"import axios from'axios';const API_URL='http://localhost:8080/api';/**\r\n * Makes a GET request to the API\r\n * @param {string} endpoint - API endpoint\r\n * @param {object} params - Query parameters\r\n * @returns {Promise<any>} - Response data\r\n */export const get=async function(endpoint){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=new URL(`${API_URL}${endpoint}`);// Add query parameters\nObject.keys(params).forEach(key=>{if(params[key]!==undefined&&params[key]!==null){url.searchParams.append(key,params[key]);}});const response=await fetch(url.toString());if(!response.ok){throw new Error(`API error: ${response.status}`);}return response.json();};/**\r\n * Makes a POST request to the API\r\n * @param {string} endpoint - API endpoint\r\n * @param {object} data - Request body data\r\n * @returns {Promise<any>} - Response data\r\n */export const post=async function(endpoint){let data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const response=await fetch(`${API_URL}${endpoint}`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(data)});if(!response.ok){throw new Error(`API error: ${response.status}`);}return response.json();};// Generate random user ID for this session\nconst USER_ID=`user-${Math.floor(Math.random()*10000)}`;const api={// Game operations\ncreateGame:async username=>{const response=await axios.post(`${API_URL}/game/start`,{creator_id:USER_ID,username:username||'Anonymous'});return response.data;},joinGame:async(gameId,username,team)=>{const response=await axios.post(`${API_URL}/game/join`,{game_id:gameId,player_id:USER_ID,username:username||'Anonymous',team:team||'red'});return response.data;},getGameState:async gameId=>{const response=await axios.get(`${API_URL}/game/state?id=${gameId}`);return response.data;},setSpymaster:async gameId=>{const response=await axios.post(`${API_URL}/game/set-spymaster?game_id=${gameId}&player_id=${USER_ID}`);return response.data;},revealCard:async(gameId,cardId)=>{const response=await axios.post(`${API_URL}/game/reveal`,{game_id:gameId,card_id:cardId,player_id:USER_ID});return response.data;},endTurn:async gameId=>{const response=await axios.post(`${API_URL}/game/end-turn?game_id=${gameId}&player_id=${USER_ID}`);return response.data;},// Chat operations\nsendMessage:async(gameId,username,content)=>{const response=await axios.post(`${API_URL}/chat/send`,{content:content,sender_id:USER_ID,username:username||'Anonymous',chat_id:gameId});return response.data;},getMessages:async gameId=>{const response=await axios.get(`${API_URL}/chat/messages?chat_id=${gameId}`);return response.data;},// Helper method to get current user ID\ngetUserId:()=>USER_ID};export default api;","map":{"version":3,"names":["axios","API_URL","get","endpoint","params","arguments","length","undefined","url","URL","Object","keys","forEach","key","searchParams","append","response","fetch","toString","ok","Error","status","json","post","data","method","headers","body","JSON","stringify","USER_ID","Math","floor","random","api","createGame","username","creator_id","joinGame","gameId","team","game_id","player_id","getGameState","setSpymaster","revealCard","cardId","card_id","endTurn","sendMessage","content","sender_id","chat_id","getMessages","getUserId"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:8080/api';\r\n\r\n/**\r\n * Makes a GET request to the API\r\n * @param {string} endpoint - API endpoint\r\n * @param {object} params - Query parameters\r\n * @returns {Promise<any>} - Response data\r\n */\r\nexport const get = async (endpoint, params = {}) => {\r\n  const url = new URL(`${API_URL}${endpoint}`);\r\n  \r\n  // Add query parameters\r\n  Object.keys(params).forEach(key => {\r\n    if (params[key] !== undefined && params[key] !== null) {\r\n      url.searchParams.append(key, params[key]);\r\n    }\r\n  });\r\n  \r\n  const response = await fetch(url.toString());\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`API error: ${response.status}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n/**\r\n * Makes a POST request to the API\r\n * @param {string} endpoint - API endpoint\r\n * @param {object} data - Request body data\r\n * @returns {Promise<any>} - Response data\r\n */\r\nexport const post = async (endpoint, data = {}) => {\r\n  const response = await fetch(`${API_URL}${endpoint}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n  \r\n  if (!response.ok) {\r\n    throw new Error(`API error: ${response.status}`);\r\n  }\r\n  \r\n  return response.json();\r\n};\r\n\r\n// Generate random user ID for this session\r\nconst USER_ID = `user-${Math.floor(Math.random() * 10000)}`;\r\n\r\nconst api = {\r\n  // Game operations\r\n  createGame: async (username) => {\r\n    const response = await axios.post(`${API_URL}/game/start`, {\r\n      creator_id: USER_ID,\r\n      username: username || 'Anonymous'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  joinGame: async (gameId, username, team) => {\r\n    const response = await axios.post(`${API_URL}/game/join`, {\r\n      game_id: gameId,\r\n      player_id: USER_ID,\r\n      username: username || 'Anonymous',\r\n      team: team || 'red'\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getGameState: async (gameId) => {\r\n    const response = await axios.get(`${API_URL}/game/state?id=${gameId}`);\r\n    return response.data;\r\n  },\r\n\r\n  setSpymaster: async (gameId) => {\r\n    const response = await axios.post(`${API_URL}/game/set-spymaster?game_id=${gameId}&player_id=${USER_ID}`);\r\n    return response.data;\r\n  },\r\n\r\n  revealCard: async (gameId, cardId) => {\r\n    const response = await axios.post(`${API_URL}/game/reveal`, {\r\n      game_id: gameId,\r\n      card_id: cardId,\r\n      player_id: USER_ID\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  endTurn: async (gameId) => {\r\n    const response = await axios.post(`${API_URL}/game/end-turn?game_id=${gameId}&player_id=${USER_ID}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Chat operations\r\n  sendMessage: async (gameId, username, content) => {\r\n    const response = await axios.post(`${API_URL}/chat/send`, {\r\n      content: content,\r\n      sender_id: USER_ID,\r\n      username: username || 'Anonymous',\r\n      chat_id: gameId\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getMessages: async (gameId) => {\r\n    const response = await axios.get(`${API_URL}/chat/messages?chat_id=${gameId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Helper method to get current user ID\r\n  getUserId: () => USER_ID\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}