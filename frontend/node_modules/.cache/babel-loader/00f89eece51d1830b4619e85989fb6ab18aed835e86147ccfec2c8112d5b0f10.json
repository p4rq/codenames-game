{"ast":null,"code":"import React,{createContext,useState,useRef,useEffect,useCallback}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";export const GameContext=/*#__PURE__*/createContext();// Define API base URL with the /api prefix\nconst API_URL='/api';// First, create a separate function to manage the WebSocket connection:\nfunction setupWebSocket(gameId,setGame){if(!gameId)return null;const wsUrl=`ws://${window.location.host}/ws/game/${gameId}?client_id=${localStorage.getItem('userId')}`;console.log(\"Setting up WebSocket connection to:\",wsUrl);const socket=new WebSocket(wsUrl);socket.onopen=()=>{console.log(\"WebSocket connection established\");};socket.onmessage=event=>{try{const gameUpdate=JSON.parse(event.data);console.log(\"Received game update via WebSocket:\",gameUpdate);setGame(gameUpdate);}catch(err){console.error(\"Error parsing WebSocket message:\",err);}};socket.onclose=event=>{console.log(\"WebSocket connection closed:\",event);};socket.onerror=error=>{console.error(\"WebSocket error:\",error);};return socket;}// Update your useEffect that sets up polling to be more cautious and avoid polling when WebSocket is connected:\nexport const GameProvider=_ref=>{let{children}=_ref;const[game,setGame]=useState(null);const[error,setError]=useState(null);const[loading,setLoading]=useState(false);const[wsConnected,setWsConnected]=useState(false);const socketRef=useRef(null);const pollingIntervalRef=useRef(null);// Function to fetch game state (polling)\nconst fetchGameState=useCallback(async gameId=>{if(!gameId)return;try{const response=await axios.get(`${API_URL}/api/game/state?game_id=${gameId}`);setGame(response.data);}catch(err){console.error(\"Error fetching game state:\",err);// Don't set error state here, as it might disrupt the UI during normal polling\n}},[]);// Setup WebSocket connection\nconst setupWebSocket=useCallback(gameId=>{if(!gameId)return;// Clean up any existing socket\nif(socketRef.current){console.log(\"Closing existing WebSocket connection\");socketRef.current.close();socketRef.current=null;}const userId=localStorage.getItem('userId');const wsUrl=`ws://${window.location.host}/ws/game/${gameId}?client_id=${userId}`;console.log(\"Setting up WebSocket connection to:\",wsUrl);const socket=new WebSocket(wsUrl);socket.onopen=()=>{console.log(\"WebSocket connection established\");setWsConnected(true);// Stop polling when WebSocket is connected\nif(pollingIntervalRef.current){console.log(\"Stopping polling as WebSocket is now connected\");clearInterval(pollingIntervalRef.current);pollingIntervalRef.current=null;}};socket.onmessage=event=>{try{const gameUpdate=JSON.parse(event.data);console.log(\"Received game update via WebSocket\");setGame(gameUpdate);}catch(err){console.error(\"Error parsing WebSocket message:\",err);}};socket.onclose=event=>{console.log(\"WebSocket connection closed:\",event);setWsConnected(false);// Start polling again if WebSocket disconnects\nif(!pollingIntervalRef.current){console.log(\"Starting fallback polling as WebSocket disconnected\");pollingIntervalRef.current=setInterval(()=>{fetchGameState(gameId);},5000);// Poll every 5 seconds as fallback\n}};socket.onerror=error=>{console.error(\"WebSocket error:\",error);setWsConnected(false);};socketRef.current=socket;return socket;},[fetchGameState]);// Function to join or load a game\nconst joinOrLoadGame=useCallback(async(gameId,playerId,username,team)=>{try{clearError();setLoading(true);// First try to join the game\nconst joinResponse=await axios.post(`${API_URL}/api/game/join`,{game_id:gameId,player_id:playerId,username,team});setGame(joinResponse.data);// Set up WebSocket connection after successfully joining\nsetupWebSocket(gameId);// Set up fallback polling in case WebSocket fails\nif(!wsConnected){console.log(\"Setting up initial fallback polling\");if(pollingIntervalRef.current){clearInterval(pollingIntervalRef.current);}pollingIntervalRef.current=setInterval(()=>{fetchGameState(gameId);},5000);// Poll every 5 seconds as fallback\n}return joinResponse.data;}catch(err){var _err$response,_err$response$data;console.error(\"Error joining game:\",err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||'Failed to join game');return null;}finally{setLoading(false);}},[setupWebSocket,wsConnected,fetchGameState,clearError]);// Clean up on unmount\nuseEffect(()=>{return()=>{if(socketRef.current){console.log(\"Closing WebSocket on unmount\");socketRef.current.close();}if(pollingIntervalRef.current){console.log(\"Stopping polling on unmount\");clearInterval(pollingIntervalRef.current);}};},[]);// Team change function with WebSocket reconnection\nconst changeTeam=async(gameId,playerId,team)=>{try{clearError();console.log(`Changing team for player ${playerId} to ${team} in game ${gameId}`);const response=await axios.post(`${API_URL}/api/game/change-team`,{game_id:gameId,player_id:playerId,team:team});console.log(\"Change team response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const updatedGame=response.data;setGame(updatedGame);// Reconnect WebSocket after team change\nsetupWebSocket(gameId);return updatedGame;}catch(err){var _err$response2,_err$response2$data;console.error('Error changing team:',err);setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.message)||'Failed to change team. Please try again.');return null;}};const clearError=()=>setError(null);const startNewGame=async(userId,username)=>{try{clearError();console.log(\"Creating game with:\",{userId,username});const response=await axios.post(`${API_URL}/game/start`,{creator_id:userId,username:username});console.log(\"Server response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const newGame=response.data;setGame(newGame);return newGame;}catch(err){var _err$response3;console.error(\"Error creating game:\",err);setError(((_err$response3=err.response)===null||_err$response3===void 0?void 0:_err$response3.data)||'Failed to create game. Please try again.');return null;}};const joinExistingGame=async(gameId,userId,username,team)=>{try{clearError();console.log(\"Joining game:\",{gameId,userId,username,team});const response=await axios.post(`${API_URL}/game/join`,{game_id:gameId,player_id:userId,username:username,team:team});console.log(\"Join game response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const joinedGame=response.data;setGame(joinedGame);return joinedGame;}catch(err){var _err$response4;console.error(\"Error joining game:\",err);setError(((_err$response4=err.response)===null||_err$response4===void 0?void 0:_err$response4.data)||'Failed to join game. Please try again.');return null;}};const getGameState=async gameId=>{try{clearError();const response=await axios.get(`${API_URL}/game/state?id=${gameId}`);return response.data;}catch(err){var _err$response5;console.error(\"Error fetching game state:\",err);setError(((_err$response5=err.response)===null||_err$response5===void 0?void 0:_err$response5.data)||'Failed to load game.');return null;}};const revealCard=async(gameId,cardId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/reveal`,{game_id:gameId,card_id:cardId,player_id:playerId});return response.data;}catch(err){var _err$response6;console.error(\"Error revealing card:\",err);setError(((_err$response6=err.response)===null||_err$response6===void 0?void 0:_err$response6.data)||'Failed to reveal card.');return null;}};const setSpymaster=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/set-spymaster?game_id=${gameId}&player_id=${playerId}`);return response.data;}catch(err){var _err$response7;console.error(\"Error setting spymaster:\",err);setError(((_err$response7=err.response)===null||_err$response7===void 0?void 0:_err$response7.data)||'Failed to become spymaster.');return null;}};const endTurn=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/end-turn?game_id=${gameId}&player_id=${playerId}`);return response.data;}catch(err){var _err$response8;console.error(\"Error ending turn:\",err);setError(((_err$response8=err.response)===null||_err$response8===void 0?void 0:_err$response8.data)||'Failed to end turn.');return null;}};// Cleanup function for WebSocket\nconst cleanupWebSocket=()=>{if(socketRef.current&&socketRef.current.readyState===WebSocket.OPEN){console.log(\"Closing WebSocket connection\");socketRef.current.close();socketRef.current=null;}};// Function to establish new WebSocket connection\nconst reconnectWebSocket=gameId=>{cleanupWebSocket();if(gameId){socketRef.current=setupWebSocket(gameId,setGame);}};// Setup WebSocket when game changes\nuseEffect(()=>{if(game!==null&&game!==void 0&&game.id){// Only set up WebSocket if it doesn't exist yet\nif(!socketRef.current){socketRef.current=setupWebSocket(game.id,setGame);}}// Cleanup WebSocket on unmount\nreturn()=>cleanupWebSocket();},[game===null||game===void 0?void 0:game.id]);// Update the provider value with all functions\nreturn/*#__PURE__*/_jsx(GameContext.Provider,{value:{game,error,startNewGame,joinExistingGame,getGameState,revealCard,setSpymaster,endTurn,changeTeam},children:children});};","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","useCallback","axios","jsx","_jsx","GameContext","API_URL","setupWebSocket","gameId","setGame","wsUrl","window","location","host","localStorage","getItem","console","log","socket","WebSocket","onopen","onmessage","event","gameUpdate","JSON","parse","data","err","error","onclose","onerror","GameProvider","_ref","children","game","setError","loading","setLoading","wsConnected","setWsConnected","socketRef","pollingIntervalRef","fetchGameState","response","get","current","close","userId","clearInterval","setInterval","joinOrLoadGame","playerId","username","team","clearError","joinResponse","post","game_id","player_id","_err$response","_err$response$data","message","changeTeam","id","updatedGame","_err$response2","_err$response2$data","startNewGame","creator_id","newGame","_err$response3","joinExistingGame","joinedGame","_err$response4","getGameState","_err$response5","revealCard","cardId","card_id","_err$response6","setSpymaster","_err$response7","endTurn","_err$response8","cleanupWebSocket","readyState","OPEN","reconnectWebSocket","Provider","value"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/context/GameContext.jsx"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const GameContext = createContext();\r\n\r\n// Define API base URL with the /api prefix\r\nconst API_URL = '/api';\r\n\r\n// First, create a separate function to manage the WebSocket connection:\r\nfunction setupWebSocket(gameId, setGame) {\r\n  if (!gameId) return null;\r\n  \r\n  const wsUrl = `ws://${window.location.host}/ws/game/${gameId}?client_id=${localStorage.getItem('userId')}`;\r\n  \r\n  console.log(\"Setting up WebSocket connection to:\", wsUrl);\r\n  const socket = new WebSocket(wsUrl);\r\n  \r\n  socket.onopen = () => {\r\n    console.log(\"WebSocket connection established\");\r\n  };\r\n  \r\n  socket.onmessage = (event) => {\r\n    try {\r\n      const gameUpdate = JSON.parse(event.data);\r\n      console.log(\"Received game update via WebSocket:\", gameUpdate);\r\n      setGame(gameUpdate);\r\n    } catch (err) {\r\n      console.error(\"Error parsing WebSocket message:\", err);\r\n    }\r\n  };\r\n  \r\n  socket.onclose = (event) => {\r\n    console.log(\"WebSocket connection closed:\", event);\r\n  };\r\n  \r\n  socket.onerror = (error) => {\r\n    console.error(\"WebSocket error:\", error);\r\n  };\r\n  \r\n  return socket;\r\n}\r\n\r\n// Update your useEffect that sets up polling to be more cautious and avoid polling when WebSocket is connected:\r\nexport const GameProvider = ({ children }) => {\r\n  const [game, setGame] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [wsConnected, setWsConnected] = useState(false);\r\n  const socketRef = useRef(null);\r\n  const pollingIntervalRef = useRef(null);\r\n\r\n  // Function to fetch game state (polling)\r\n  const fetchGameState = useCallback(async (gameId) => {\r\n    if (!gameId) return;\r\n    \r\n    try {\r\n      const response = await axios.get(`${API_URL}/api/game/state?game_id=${gameId}`);\r\n      setGame(response.data);\r\n    } catch (err) {\r\n      console.error(\"Error fetching game state:\", err);\r\n      // Don't set error state here, as it might disrupt the UI during normal polling\r\n    }\r\n  }, []);\r\n\r\n  // Setup WebSocket connection\r\n  const setupWebSocket = useCallback((gameId) => {\r\n    if (!gameId) return;\r\n    \r\n    // Clean up any existing socket\r\n    if (socketRef.current) {\r\n      console.log(\"Closing existing WebSocket connection\");\r\n      socketRef.current.close();\r\n      socketRef.current = null;\r\n    }\r\n    \r\n    const userId = localStorage.getItem('userId');\r\n    const wsUrl = `ws://${window.location.host}/ws/game/${gameId}?client_id=${userId}`;\r\n    \r\n    console.log(\"Setting up WebSocket connection to:\", wsUrl);\r\n    const socket = new WebSocket(wsUrl);\r\n    \r\n    socket.onopen = () => {\r\n      console.log(\"WebSocket connection established\");\r\n      setWsConnected(true);\r\n      \r\n      // Stop polling when WebSocket is connected\r\n      if (pollingIntervalRef.current) {\r\n        console.log(\"Stopping polling as WebSocket is now connected\");\r\n        clearInterval(pollingIntervalRef.current);\r\n        pollingIntervalRef.current = null;\r\n      }\r\n    };\r\n    \r\n    socket.onmessage = (event) => {\r\n      try {\r\n        const gameUpdate = JSON.parse(event.data);\r\n        console.log(\"Received game update via WebSocket\");\r\n        setGame(gameUpdate);\r\n      } catch (err) {\r\n        console.error(\"Error parsing WebSocket message:\", err);\r\n      }\r\n    };\r\n    \r\n    socket.onclose = (event) => {\r\n      console.log(\"WebSocket connection closed:\", event);\r\n      setWsConnected(false);\r\n      \r\n      // Start polling again if WebSocket disconnects\r\n      if (!pollingIntervalRef.current) {\r\n        console.log(\"Starting fallback polling as WebSocket disconnected\");\r\n        pollingIntervalRef.current = setInterval(() => {\r\n          fetchGameState(gameId);\r\n        }, 5000); // Poll every 5 seconds as fallback\r\n      }\r\n    };\r\n    \r\n    socket.onerror = (error) => {\r\n      console.error(\"WebSocket error:\", error);\r\n      setWsConnected(false);\r\n    };\r\n    \r\n    socketRef.current = socket;\r\n    return socket;\r\n  }, [fetchGameState]);\r\n\r\n  // Function to join or load a game\r\n  const joinOrLoadGame = useCallback(async (gameId, playerId, username, team) => {\r\n    try {\r\n      clearError();\r\n      setLoading(true);\r\n      \r\n      // First try to join the game\r\n      const joinResponse = await axios.post(`${API_URL}/api/game/join`, {\r\n        game_id: gameId,\r\n        player_id: playerId,\r\n        username,\r\n        team\r\n      });\r\n      \r\n      setGame(joinResponse.data);\r\n      \r\n      // Set up WebSocket connection after successfully joining\r\n      setupWebSocket(gameId);\r\n      \r\n      // Set up fallback polling in case WebSocket fails\r\n      if (!wsConnected) {\r\n        console.log(\"Setting up initial fallback polling\");\r\n        if (pollingIntervalRef.current) {\r\n          clearInterval(pollingIntervalRef.current);\r\n        }\r\n        pollingIntervalRef.current = setInterval(() => {\r\n          fetchGameState(gameId);\r\n        }, 5000); // Poll every 5 seconds as fallback\r\n      }\r\n      \r\n      return joinResponse.data;\r\n    } catch (err) {\r\n      console.error(\"Error joining game:\", err);\r\n      setError(err.response?.data?.message || 'Failed to join game');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [setupWebSocket, wsConnected, fetchGameState, clearError]);\r\n\r\n  // Clean up on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socketRef.current) {\r\n        console.log(\"Closing WebSocket on unmount\");\r\n        socketRef.current.close();\r\n      }\r\n      \r\n      if (pollingIntervalRef.current) {\r\n        console.log(\"Stopping polling on unmount\");\r\n        clearInterval(pollingIntervalRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Team change function with WebSocket reconnection\r\n  const changeTeam = async (gameId, playerId, team) => {\r\n    try {\r\n      clearError();\r\n      console.log(`Changing team for player ${playerId} to ${team} in game ${gameId}`);\r\n      \r\n      const response = await axios.post(`${API_URL}/api/game/change-team`, {\r\n        game_id: gameId,\r\n        player_id: playerId,\r\n        team: team\r\n      });\r\n      \r\n      console.log(\"Change team response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const updatedGame = response.data;\r\n      setGame(updatedGame);\r\n      \r\n      // Reconnect WebSocket after team change\r\n      setupWebSocket(gameId);\r\n      \r\n      return updatedGame;\r\n    } catch (err) {\r\n      console.error('Error changing team:', err);\r\n      setError(err.response?.data?.message || 'Failed to change team. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const clearError = () => setError(null);\r\n\r\n  const startNewGame = async (userId, username) => {\r\n    try {\r\n      clearError();\r\n      console.log(\"Creating game with:\", { userId, username });\r\n      \r\n      const response = await axios.post(`${API_URL}/game/start`, {\r\n        creator_id: userId,\r\n        username: username\r\n      });\r\n      \r\n      console.log(\"Server response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const newGame = response.data;\r\n      setGame(newGame);\r\n      return newGame;\r\n    } catch (err) {\r\n      console.error(\"Error creating game:\", err);\r\n      setError(err.response?.data || 'Failed to create game. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const joinExistingGame = async (gameId, userId, username, team) => {\r\n    try {\r\n      clearError();\r\n      console.log(\"Joining game:\", { gameId, userId, username, team });\r\n      \r\n      const response = await axios.post(`${API_URL}/game/join`, {\r\n        game_id: gameId,\r\n        player_id: userId,\r\n        username: username,\r\n        team: team\r\n      });\r\n      \r\n      console.log(\"Join game response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const joinedGame = response.data;\r\n      setGame(joinedGame);\r\n      return joinedGame;\r\n    } catch (err) {\r\n      console.error(\"Error joining game:\", err);\r\n      setError(err.response?.data || 'Failed to join game. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getGameState = async (gameId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.get(`${API_URL}/game/state?id=${gameId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error fetching game state:\", err);\r\n      setError(err.response?.data || 'Failed to load game.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const revealCard = async (gameId, cardId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/reveal`, {\r\n        game_id: gameId,\r\n        card_id: cardId,\r\n        player_id: playerId\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error revealing card:\", err);\r\n      setError(err.response?.data || 'Failed to reveal card.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const setSpymaster = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/set-spymaster?game_id=${gameId}&player_id=${playerId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error setting spymaster:\", err);\r\n      setError(err.response?.data || 'Failed to become spymaster.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const endTurn = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/end-turn?game_id=${gameId}&player_id=${playerId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error ending turn:\", err);\r\n      setError(err.response?.data || 'Failed to end turn.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Cleanup function for WebSocket\r\n  const cleanupWebSocket = () => {\r\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n      console.log(\"Closing WebSocket connection\");\r\n      socketRef.current.close();\r\n      socketRef.current = null;\r\n    }\r\n  };\r\n  \r\n  // Function to establish new WebSocket connection\r\n  const reconnectWebSocket = (gameId) => {\r\n    cleanupWebSocket();\r\n    if (gameId) {\r\n      socketRef.current = setupWebSocket(gameId, setGame);\r\n    }\r\n  };\r\n  \r\n  // Setup WebSocket when game changes\r\n  useEffect(() => {\r\n    if (game?.id) {\r\n      // Only set up WebSocket if it doesn't exist yet\r\n      if (!socketRef.current) {\r\n        socketRef.current = setupWebSocket(game.id, setGame);\r\n      }\r\n    }\r\n    \r\n    // Cleanup WebSocket on unmount\r\n    return () => cleanupWebSocket();\r\n  }, [game?.id]);\r\n  \r\n  // Update the provider value with all functions\r\n  return (\r\n    <GameContext.Provider \r\n      value={{ \r\n        game, \r\n        error, \r\n        startNewGame, \r\n        joinExistingGame,\r\n        getGameState, \r\n        revealCard, \r\n        setSpymaster, \r\n        endTurn,\r\n        changeTeam\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,MAAM,CAAEC,SAAS,CAAEC,WAAW,KAAQ,OAAO,CACtF,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1B,MAAO,MAAM,CAAAC,WAAW,cAAGR,aAAa,CAAC,CAAC,CAE1C;AACA,KAAM,CAAAS,OAAO,CAAG,MAAM,CAEtB;AACA,QAAS,CAAAC,cAAcA,CAACC,MAAM,CAAEC,OAAO,CAAE,CACvC,GAAI,CAACD,MAAM,CAAE,MAAO,KAAI,CAExB,KAAM,CAAAE,KAAK,CAAG,QAAQC,MAAM,CAACC,QAAQ,CAACC,IAAI,YAAYL,MAAM,cAAcM,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAE1GC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAEP,KAAK,CAAC,CACzD,KAAM,CAAAQ,MAAM,CAAG,GAAI,CAAAC,SAAS,CAACT,KAAK,CAAC,CAEnCQ,MAAM,CAACE,MAAM,CAAG,IAAM,CACpBJ,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CACjD,CAAC,CAEDC,MAAM,CAACG,SAAS,CAAIC,KAAK,EAAK,CAC5B,GAAI,CACF,KAAM,CAAAC,UAAU,CAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC,CACzCV,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAEM,UAAU,CAAC,CAC9Dd,OAAO,CAACc,UAAU,CAAC,CACrB,CAAE,MAAOI,GAAG,CAAE,CACZX,OAAO,CAACY,KAAK,CAAC,kCAAkC,CAAED,GAAG,CAAC,CACxD,CACF,CAAC,CAEDT,MAAM,CAACW,OAAO,CAAIP,KAAK,EAAK,CAC1BN,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAEK,KAAK,CAAC,CACpD,CAAC,CAEDJ,MAAM,CAACY,OAAO,CAAIF,KAAK,EAAK,CAC1BZ,OAAO,CAACY,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAAC,CAC1C,CAAC,CAED,MAAO,CAAAV,MAAM,CACf,CAEA;AACA,MAAO,MAAM,CAAAa,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACvC,KAAM,CAACE,IAAI,CAAEzB,OAAO,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAAC8B,KAAK,CAAEO,QAAQ,CAAC,CAAGrC,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACsC,OAAO,CAAEC,UAAU,CAAC,CAAGvC,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAACwC,WAAW,CAAEC,cAAc,CAAC,CAAGzC,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAAA0C,SAAS,CAAGzC,MAAM,CAAC,IAAI,CAAC,CAC9B,KAAM,CAAA0C,kBAAkB,CAAG1C,MAAM,CAAC,IAAI,CAAC,CAEvC;AACA,KAAM,CAAA2C,cAAc,CAAGzC,WAAW,CAAC,KAAO,CAAAO,MAAM,EAAK,CACnD,GAAI,CAACA,MAAM,CAAE,OAEb,GAAI,CACF,KAAM,CAAAmC,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAAC0C,GAAG,CAAC,GAAGtC,OAAO,2BAA2BE,MAAM,EAAE,CAAC,CAC/EC,OAAO,CAACkC,QAAQ,CAACjB,IAAI,CAAC,CACxB,CAAE,MAAOC,GAAG,CAAE,CACZX,OAAO,CAACY,KAAK,CAAC,4BAA4B,CAAED,GAAG,CAAC,CAChD;AACF,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAApB,cAAc,CAAGN,WAAW,CAAEO,MAAM,EAAK,CAC7C,GAAI,CAACA,MAAM,CAAE,OAEb;AACA,GAAIgC,SAAS,CAACK,OAAO,CAAE,CACrB7B,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC,CACpDuB,SAAS,CAACK,OAAO,CAACC,KAAK,CAAC,CAAC,CACzBN,SAAS,CAACK,OAAO,CAAG,IAAI,CAC1B,CAEA,KAAM,CAAAE,MAAM,CAAGjC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAC7C,KAAM,CAAAL,KAAK,CAAG,QAAQC,MAAM,CAACC,QAAQ,CAACC,IAAI,YAAYL,MAAM,cAAcuC,MAAM,EAAE,CAElF/B,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAEP,KAAK,CAAC,CACzD,KAAM,CAAAQ,MAAM,CAAG,GAAI,CAAAC,SAAS,CAACT,KAAK,CAAC,CAEnCQ,MAAM,CAACE,MAAM,CAAG,IAAM,CACpBJ,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CAC/CsB,cAAc,CAAC,IAAI,CAAC,CAEpB;AACA,GAAIE,kBAAkB,CAACI,OAAO,CAAE,CAC9B7B,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC,CAC7D+B,aAAa,CAACP,kBAAkB,CAACI,OAAO,CAAC,CACzCJ,kBAAkB,CAACI,OAAO,CAAG,IAAI,CACnC,CACF,CAAC,CAED3B,MAAM,CAACG,SAAS,CAAIC,KAAK,EAAK,CAC5B,GAAI,CACF,KAAM,CAAAC,UAAU,CAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI,CAAC,CACzCV,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC,CACjDR,OAAO,CAACc,UAAU,CAAC,CACrB,CAAE,MAAOI,GAAG,CAAE,CACZX,OAAO,CAACY,KAAK,CAAC,kCAAkC,CAAED,GAAG,CAAC,CACxD,CACF,CAAC,CAEDT,MAAM,CAACW,OAAO,CAAIP,KAAK,EAAK,CAC1BN,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAEK,KAAK,CAAC,CAClDiB,cAAc,CAAC,KAAK,CAAC,CAErB;AACA,GAAI,CAACE,kBAAkB,CAACI,OAAO,CAAE,CAC/B7B,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC,CAClEwB,kBAAkB,CAACI,OAAO,CAAGI,WAAW,CAAC,IAAM,CAC7CP,cAAc,CAAClC,MAAM,CAAC,CACxB,CAAC,CAAE,IAAI,CAAC,CAAE;AACZ,CACF,CAAC,CAEDU,MAAM,CAACY,OAAO,CAAIF,KAAK,EAAK,CAC1BZ,OAAO,CAACY,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAAC,CACxCW,cAAc,CAAC,KAAK,CAAC,CACvB,CAAC,CAEDC,SAAS,CAACK,OAAO,CAAG3B,MAAM,CAC1B,MAAO,CAAAA,MAAM,CACf,CAAC,CAAE,CAACwB,cAAc,CAAC,CAAC,CAEpB;AACA,KAAM,CAAAQ,cAAc,CAAGjD,WAAW,CAAC,MAAOO,MAAM,CAAE2C,QAAQ,CAAEC,QAAQ,CAAEC,IAAI,GAAK,CAC7E,GAAI,CACFC,UAAU,CAAC,CAAC,CACZjB,UAAU,CAAC,IAAI,CAAC,CAEhB;AACA,KAAM,CAAAkB,YAAY,CAAG,KAAM,CAAArD,KAAK,CAACsD,IAAI,CAAC,GAAGlD,OAAO,gBAAgB,CAAE,CAChEmD,OAAO,CAAEjD,MAAM,CACfkD,SAAS,CAAEP,QAAQ,CACnBC,QAAQ,CACRC,IACF,CAAC,CAAC,CAEF5C,OAAO,CAAC8C,YAAY,CAAC7B,IAAI,CAAC,CAE1B;AACAnB,cAAc,CAACC,MAAM,CAAC,CAEtB;AACA,GAAI,CAAC8B,WAAW,CAAE,CAChBtB,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC,CAClD,GAAIwB,kBAAkB,CAACI,OAAO,CAAE,CAC9BG,aAAa,CAACP,kBAAkB,CAACI,OAAO,CAAC,CAC3C,CACAJ,kBAAkB,CAACI,OAAO,CAAGI,WAAW,CAAC,IAAM,CAC7CP,cAAc,CAAClC,MAAM,CAAC,CACxB,CAAC,CAAE,IAAI,CAAC,CAAE;AACZ,CAEA,MAAO,CAAA+C,YAAY,CAAC7B,IAAI,CAC1B,CAAE,MAAOC,GAAG,CAAE,KAAAgC,aAAA,CAAAC,kBAAA,CACZ5C,OAAO,CAACY,KAAK,CAAC,qBAAqB,CAAED,GAAG,CAAC,CACzCQ,QAAQ,CAAC,EAAAwB,aAAA,CAAAhC,GAAG,CAACgB,QAAQ,UAAAgB,aAAA,kBAAAC,kBAAA,CAAZD,aAAA,CAAcjC,IAAI,UAAAkC,kBAAA,iBAAlBA,kBAAA,CAAoBC,OAAO,GAAI,qBAAqB,CAAC,CAC9D,MAAO,KAAI,CACb,CAAC,OAAS,CACRxB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAAE,CAAC9B,cAAc,CAAE+B,WAAW,CAAEI,cAAc,CAAEY,UAAU,CAAC,CAAC,CAE7D;AACAtD,SAAS,CAAC,IAAM,CACd,MAAO,IAAM,CACX,GAAIwC,SAAS,CAACK,OAAO,CAAE,CACrB7B,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC3CuB,SAAS,CAACK,OAAO,CAACC,KAAK,CAAC,CAAC,CAC3B,CAEA,GAAIL,kBAAkB,CAACI,OAAO,CAAE,CAC9B7B,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAC1C+B,aAAa,CAACP,kBAAkB,CAACI,OAAO,CAAC,CAC3C,CACF,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAiB,UAAU,CAAG,KAAAA,CAAOtD,MAAM,CAAE2C,QAAQ,CAAEE,IAAI,GAAK,CACnD,GAAI,CACFC,UAAU,CAAC,CAAC,CACZtC,OAAO,CAACC,GAAG,CAAC,4BAA4BkC,QAAQ,OAAOE,IAAI,YAAY7C,MAAM,EAAE,CAAC,CAEhF,KAAM,CAAAmC,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAACsD,IAAI,CAAC,GAAGlD,OAAO,uBAAuB,CAAE,CACnEmD,OAAO,CAAEjD,MAAM,CACfkD,SAAS,CAAEP,QAAQ,CACnBE,IAAI,CAAEA,IACR,CAAC,CAAC,CAEFrC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAE0B,QAAQ,CAACjB,IAAI,CAAC,CAEnD,GAAI,CAACiB,QAAQ,CAACjB,IAAI,EAAI,CAACiB,QAAQ,CAACjB,IAAI,CAACqC,EAAE,CAAE,CACvC/C,OAAO,CAACY,KAAK,CAAC,wBAAwB,CAAEe,QAAQ,CAACjB,IAAI,CAAC,CACtDS,QAAQ,CAAC,oDAAoD,CAAC,CAC9D,MAAO,KAAI,CACb,CAEA,KAAM,CAAA6B,WAAW,CAAGrB,QAAQ,CAACjB,IAAI,CACjCjB,OAAO,CAACuD,WAAW,CAAC,CAEpB;AACAzD,cAAc,CAACC,MAAM,CAAC,CAEtB,MAAO,CAAAwD,WAAW,CACpB,CAAE,MAAOrC,GAAG,CAAE,KAAAsC,cAAA,CAAAC,mBAAA,CACZlD,OAAO,CAACY,KAAK,CAAC,sBAAsB,CAAED,GAAG,CAAC,CAC1CQ,QAAQ,CAAC,EAAA8B,cAAA,CAAAtC,GAAG,CAACgB,QAAQ,UAAAsB,cAAA,kBAAAC,mBAAA,CAAZD,cAAA,CAAcvC,IAAI,UAAAwC,mBAAA,iBAAlBA,mBAAA,CAAoBL,OAAO,GAAI,0CAA0C,CAAC,CACnF,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAP,UAAU,CAAGA,CAAA,GAAMnB,QAAQ,CAAC,IAAI,CAAC,CAEvC,KAAM,CAAAgC,YAAY,CAAG,KAAAA,CAAOpB,MAAM,CAAEK,QAAQ,GAAK,CAC/C,GAAI,CACFE,UAAU,CAAC,CAAC,CACZtC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAE,CAAE8B,MAAM,CAAEK,QAAS,CAAC,CAAC,CAExD,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAACsD,IAAI,CAAC,GAAGlD,OAAO,aAAa,CAAE,CACzD8D,UAAU,CAAErB,MAAM,CAClBK,QAAQ,CAAEA,QACZ,CAAC,CAAC,CAEFpC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAE0B,QAAQ,CAACjB,IAAI,CAAC,CAE9C,GAAI,CAACiB,QAAQ,CAACjB,IAAI,EAAI,CAACiB,QAAQ,CAACjB,IAAI,CAACqC,EAAE,CAAE,CACvC/C,OAAO,CAACY,KAAK,CAAC,wBAAwB,CAAEe,QAAQ,CAACjB,IAAI,CAAC,CACtDS,QAAQ,CAAC,oDAAoD,CAAC,CAC9D,MAAO,KAAI,CACb,CAEA,KAAM,CAAAkC,OAAO,CAAG1B,QAAQ,CAACjB,IAAI,CAC7BjB,OAAO,CAAC4D,OAAO,CAAC,CAChB,MAAO,CAAAA,OAAO,CAChB,CAAE,MAAO1C,GAAG,CAAE,KAAA2C,cAAA,CACZtD,OAAO,CAACY,KAAK,CAAC,sBAAsB,CAAED,GAAG,CAAC,CAC1CQ,QAAQ,CAAC,EAAAmC,cAAA,CAAA3C,GAAG,CAACgB,QAAQ,UAAA2B,cAAA,iBAAZA,cAAA,CAAc5C,IAAI,GAAI,0CAA0C,CAAC,CAC1E,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAA6C,gBAAgB,CAAG,KAAAA,CAAO/D,MAAM,CAAEuC,MAAM,CAAEK,QAAQ,CAAEC,IAAI,GAAK,CACjE,GAAI,CACFC,UAAU,CAAC,CAAC,CACZtC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAE,CAAET,MAAM,CAAEuC,MAAM,CAAEK,QAAQ,CAAEC,IAAK,CAAC,CAAC,CAEhE,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAACsD,IAAI,CAAC,GAAGlD,OAAO,YAAY,CAAE,CACxDmD,OAAO,CAAEjD,MAAM,CACfkD,SAAS,CAAEX,MAAM,CACjBK,QAAQ,CAAEA,QAAQ,CAClBC,IAAI,CAAEA,IACR,CAAC,CAAC,CAEFrC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAE0B,QAAQ,CAACjB,IAAI,CAAC,CAEjD,GAAI,CAACiB,QAAQ,CAACjB,IAAI,EAAI,CAACiB,QAAQ,CAACjB,IAAI,CAACqC,EAAE,CAAE,CACvC/C,OAAO,CAACY,KAAK,CAAC,wBAAwB,CAAEe,QAAQ,CAACjB,IAAI,CAAC,CACtDS,QAAQ,CAAC,oDAAoD,CAAC,CAC9D,MAAO,KAAI,CACb,CAEA,KAAM,CAAAqC,UAAU,CAAG7B,QAAQ,CAACjB,IAAI,CAChCjB,OAAO,CAAC+D,UAAU,CAAC,CACnB,MAAO,CAAAA,UAAU,CACnB,CAAE,MAAO7C,GAAG,CAAE,KAAA8C,cAAA,CACZzD,OAAO,CAACY,KAAK,CAAC,qBAAqB,CAAED,GAAG,CAAC,CACzCQ,QAAQ,CAAC,EAAAsC,cAAA,CAAA9C,GAAG,CAACgB,QAAQ,UAAA8B,cAAA,iBAAZA,cAAA,CAAc/C,IAAI,GAAI,wCAAwC,CAAC,CACxE,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAgD,YAAY,CAAG,KAAO,CAAAlE,MAAM,EAAK,CACrC,GAAI,CACF8C,UAAU,CAAC,CAAC,CACZ,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAAC0C,GAAG,CAAC,GAAGtC,OAAO,kBAAkBE,MAAM,EAAE,CAAC,CACtE,MAAO,CAAAmC,QAAQ,CAACjB,IAAI,CACtB,CAAE,MAAOC,GAAG,CAAE,KAAAgD,cAAA,CACZ3D,OAAO,CAACY,KAAK,CAAC,4BAA4B,CAAED,GAAG,CAAC,CAChDQ,QAAQ,CAAC,EAAAwC,cAAA,CAAAhD,GAAG,CAACgB,QAAQ,UAAAgC,cAAA,iBAAZA,cAAA,CAAcjD,IAAI,GAAI,sBAAsB,CAAC,CACtD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAkD,UAAU,CAAG,KAAAA,CAAOpE,MAAM,CAAEqE,MAAM,CAAE1B,QAAQ,GAAK,CACrD,GAAI,CACFG,UAAU,CAAC,CAAC,CACZ,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAACsD,IAAI,CAAC,GAAGlD,OAAO,cAAc,CAAE,CAC1DmD,OAAO,CAAEjD,MAAM,CACfsE,OAAO,CAAED,MAAM,CACfnB,SAAS,CAAEP,QACb,CAAC,CAAC,CACF,MAAO,CAAAR,QAAQ,CAACjB,IAAI,CACtB,CAAE,MAAOC,GAAG,CAAE,KAAAoD,cAAA,CACZ/D,OAAO,CAACY,KAAK,CAAC,uBAAuB,CAAED,GAAG,CAAC,CAC3CQ,QAAQ,CAAC,EAAA4C,cAAA,CAAApD,GAAG,CAACgB,QAAQ,UAAAoC,cAAA,iBAAZA,cAAA,CAAcrD,IAAI,GAAI,wBAAwB,CAAC,CACxD,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAsD,YAAY,CAAG,KAAAA,CAAOxE,MAAM,CAAE2C,QAAQ,GAAK,CAC/C,GAAI,CACFG,UAAU,CAAC,CAAC,CACZ,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAACsD,IAAI,CAAC,GAAGlD,OAAO,+BAA+BE,MAAM,cAAc2C,QAAQ,EAAE,CAAC,CAC1G,MAAO,CAAAR,QAAQ,CAACjB,IAAI,CACtB,CAAE,MAAOC,GAAG,CAAE,KAAAsD,cAAA,CACZjE,OAAO,CAACY,KAAK,CAAC,0BAA0B,CAAED,GAAG,CAAC,CAC9CQ,QAAQ,CAAC,EAAA8C,cAAA,CAAAtD,GAAG,CAACgB,QAAQ,UAAAsC,cAAA,iBAAZA,cAAA,CAAcvD,IAAI,GAAI,6BAA6B,CAAC,CAC7D,MAAO,KAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAwD,OAAO,CAAG,KAAAA,CAAO1E,MAAM,CAAE2C,QAAQ,GAAK,CAC1C,GAAI,CACFG,UAAU,CAAC,CAAC,CACZ,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAzC,KAAK,CAACsD,IAAI,CAAC,GAAGlD,OAAO,0BAA0BE,MAAM,cAAc2C,QAAQ,EAAE,CAAC,CACrG,MAAO,CAAAR,QAAQ,CAACjB,IAAI,CACtB,CAAE,MAAOC,GAAG,CAAE,KAAAwD,cAAA,CACZnE,OAAO,CAACY,KAAK,CAAC,oBAAoB,CAAED,GAAG,CAAC,CACxCQ,QAAQ,CAAC,EAAAgD,cAAA,CAAAxD,GAAG,CAACgB,QAAQ,UAAAwC,cAAA,iBAAZA,cAAA,CAAczD,IAAI,GAAI,qBAAqB,CAAC,CACrD,MAAO,KAAI,CACb,CACF,CAAC,CAED;AACA,KAAM,CAAA0D,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,GAAI5C,SAAS,CAACK,OAAO,EAAIL,SAAS,CAACK,OAAO,CAACwC,UAAU,GAAKlE,SAAS,CAACmE,IAAI,CAAE,CACxEtE,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC3CuB,SAAS,CAACK,OAAO,CAACC,KAAK,CAAC,CAAC,CACzBN,SAAS,CAACK,OAAO,CAAG,IAAI,CAC1B,CACF,CAAC,CAED;AACA,KAAM,CAAA0C,kBAAkB,CAAI/E,MAAM,EAAK,CACrC4E,gBAAgB,CAAC,CAAC,CAClB,GAAI5E,MAAM,CAAE,CACVgC,SAAS,CAACK,OAAO,CAAGtC,cAAc,CAACC,MAAM,CAAEC,OAAO,CAAC,CACrD,CACF,CAAC,CAED;AACAT,SAAS,CAAC,IAAM,CACd,GAAIkC,IAAI,SAAJA,IAAI,WAAJA,IAAI,CAAE6B,EAAE,CAAE,CACZ;AACA,GAAI,CAACvB,SAAS,CAACK,OAAO,CAAE,CACtBL,SAAS,CAACK,OAAO,CAAGtC,cAAc,CAAC2B,IAAI,CAAC6B,EAAE,CAAEtD,OAAO,CAAC,CACtD,CACF,CAEA;AACA,MAAO,IAAM2E,gBAAgB,CAAC,CAAC,CACjC,CAAC,CAAE,CAAClD,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAE6B,EAAE,CAAC,CAAC,CAEd;AACA,mBACE3D,IAAA,CAACC,WAAW,CAACmF,QAAQ,EACnBC,KAAK,CAAE,CACLvD,IAAI,CACJN,KAAK,CACLuC,YAAY,CACZI,gBAAgB,CAChBG,YAAY,CACZE,UAAU,CACVI,YAAY,CACZE,OAAO,CACPpB,UACF,CAAE,CAAA7B,QAAA,CAEDA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}