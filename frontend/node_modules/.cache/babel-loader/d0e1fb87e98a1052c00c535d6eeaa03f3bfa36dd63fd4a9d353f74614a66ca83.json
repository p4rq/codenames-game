{"ast":null,"code":"import React,{createContext,useState}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";export const GameContext=/*#__PURE__*/createContext();// Define API base URL with the /api prefix\nconst API_URL='/api';export const GameProvider=_ref=>{let{children}=_ref;const[error,setError]=useState(null);const[game,setGame]=useState({id:null,cards:[],players:[],current_turn:null,red_cards_left:0,blue_cards_left:0,winning_team:null});const clearError=()=>setError(null);const startNewGame=async(userId,username)=>{try{clearError();console.log(\"Creating game with:\",{userId,username});const response=await axios.post(`${API_URL}/game/start`,{creator_id:userId,username:username});console.log(\"Server response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const newGame=response.data;setGame(newGame);return newGame;}catch(err){var _err$response;console.error(\"Error creating game:\",err);setError(((_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.data)||'Failed to create game. Please try again.');return null;}};const joinExistingGame=async(gameId,userId,username,team)=>{try{clearError();console.log(\"Joining game:\",{gameId,userId,username,team});const response=await axios.post(`${API_URL}/game/join`,{game_id:gameId,player_id:userId,username:username,team:team});console.log(\"Join game response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const joinedGame=response.data;setGame(joinedGame);return joinedGame;}catch(err){var _err$response2;console.error(\"Error joining game:\",err);setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:_err$response2.data)||'Failed to join game. Please try again.');return null;}};const getGameState=async gameId=>{try{clearError();const response=await axios.get(`${API_URL}/game/state?id=${gameId}`);return response.data;}catch(err){var _err$response3;console.error(\"Error fetching game state:\",err);setError(((_err$response3=err.response)===null||_err$response3===void 0?void 0:_err$response3.data)||'Failed to load game.');return null;}};const revealCard=async(gameId,cardId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/reveal`,{game_id:gameId,card_id:cardId,player_id:playerId});return response.data;}catch(err){var _err$response4;console.error(\"Error revealing card:\",err);setError(((_err$response4=err.response)===null||_err$response4===void 0?void 0:_err$response4.data)||'Failed to reveal card.');return null;}};const setSpymaster=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/set-spymaster?game_id=${gameId}&player_id=${playerId}`);return response.data;}catch(err){var _err$response5;console.error(\"Error setting spymaster:\",err);setError(((_err$response5=err.response)===null||_err$response5===void 0?void 0:_err$response5.data)||'Failed to become spymaster.');return null;}};const endTurn=async(gameId,playerId)=>{try{clearError();const response=await axios.post(`${API_URL}/game/end-turn?game_id=${gameId}&player_id=${playerId}`);return response.data;}catch(err){var _err$response6;console.error(\"Error ending turn:\",err);setError(((_err$response6=err.response)===null||_err$response6===void 0?void 0:_err$response6.data)||'Failed to end turn.');return null;}};// Updated to use consistent API pattern and axios\nconst changeTeam=async(gameId,playerId,team)=>{try{clearError();console.log(`Changing team for player ${playerId} to ${team} in game ${gameId}`);// Update the URL to match your backend route without the /api prefix\nconst response=await axios.post(`${API_URL}/game/change-team`,{game_id:gameId,player_id:playerId,team:team});console.log(\"Change team response:\",response.data);if(!response.data||!response.data.id){console.error(\"Invalid game response:\",response.data);setError(\"Server returned an invalid game. Please try again.\");return null;}const updatedGame=response.data;setGame(updatedGame);return updatedGame;}catch(err){var _err$response7,_err$response7$data;console.error('Error changing team:',err);if(err.response){console.error('Error response:',{status:err.response.status,headers:err.response.headers,data:err.response.data});}setError(((_err$response7=err.response)===null||_err$response7===void 0?void 0:(_err$response7$data=_err$response7.data)===null||_err$response7$data===void 0?void 0:_err$response7$data.message)||'Failed to change team. Please try again.');return null;}};// Update the provider value with all functions\nreturn/*#__PURE__*/_jsx(GameContext.Provider,{value:{game,error,startNewGame,joinExistingGame,getGameState,revealCard,setSpymaster,endTurn,changeTeam},children:children});};","map":{"version":3,"names":["React","createContext","useState","axios","jsx","_jsx","GameContext","API_URL","GameProvider","_ref","children","error","setError","game","setGame","id","cards","players","current_turn","red_cards_left","blue_cards_left","winning_team","clearError","startNewGame","userId","username","console","log","response","post","creator_id","data","newGame","err","_err$response","joinExistingGame","gameId","team","game_id","player_id","joinedGame","_err$response2","getGameState","get","_err$response3","revealCard","cardId","playerId","card_id","_err$response4","setSpymaster","_err$response5","endTurn","_err$response6","changeTeam","updatedGame","_err$response7","_err$response7$data","status","headers","message","Provider","value"],"sources":["C:/Users/anuarbek/codenames-game/frontend/src/context/GameContext.jsx"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const GameContext = createContext();\r\n\r\n// Define API base URL with the /api prefix\r\nconst API_URL = '/api';\r\n\r\nexport const GameProvider = ({ children }) => {\r\n  const [error, setError] = useState(null);\r\n  const [game, setGame] = useState({\r\n    id: null,\r\n    cards: [],\r\n    players: [],\r\n    current_turn: null,\r\n    red_cards_left: 0,\r\n    blue_cards_left: 0,\r\n    winning_team: null\r\n  });\r\n  \r\n  const clearError = () => setError(null);\r\n\r\n  const startNewGame = async (userId, username) => {\r\n    try {\r\n      clearError();\r\n      console.log(\"Creating game with:\", { userId, username });\r\n      \r\n      const response = await axios.post(`${API_URL}/game/start`, {\r\n        creator_id: userId,\r\n        username: username\r\n      });\r\n      \r\n      console.log(\"Server response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const newGame = response.data;\r\n      setGame(newGame);\r\n      return newGame;\r\n    } catch (err) {\r\n      console.error(\"Error creating game:\", err);\r\n      setError(err.response?.data || 'Failed to create game. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const joinExistingGame = async (gameId, userId, username, team) => {\r\n    try {\r\n      clearError();\r\n      console.log(\"Joining game:\", { gameId, userId, username, team });\r\n      \r\n      const response = await axios.post(`${API_URL}/game/join`, {\r\n        game_id: gameId,\r\n        player_id: userId,\r\n        username: username,\r\n        team: team\r\n      });\r\n      \r\n      console.log(\"Join game response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const joinedGame = response.data;\r\n      setGame(joinedGame);\r\n      return joinedGame;\r\n    } catch (err) {\r\n      console.error(\"Error joining game:\", err);\r\n      setError(err.response?.data || 'Failed to join game. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getGameState = async (gameId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.get(`${API_URL}/game/state?id=${gameId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error fetching game state:\", err);\r\n      setError(err.response?.data || 'Failed to load game.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const revealCard = async (gameId, cardId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/reveal`, {\r\n        game_id: gameId,\r\n        card_id: cardId,\r\n        player_id: playerId\r\n      });\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error revealing card:\", err);\r\n      setError(err.response?.data || 'Failed to reveal card.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const setSpymaster = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/set-spymaster?game_id=${gameId}&player_id=${playerId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error setting spymaster:\", err);\r\n      setError(err.response?.data || 'Failed to become spymaster.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const endTurn = async (gameId, playerId) => {\r\n    try {\r\n      clearError();\r\n      const response = await axios.post(`${API_URL}/game/end-turn?game_id=${gameId}&player_id=${playerId}`);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error(\"Error ending turn:\", err);\r\n      setError(err.response?.data || 'Failed to end turn.');\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Updated to use consistent API pattern and axios\r\n  const changeTeam = async (gameId, playerId, team) => {\r\n    try {\r\n      clearError();\r\n      console.log(`Changing team for player ${playerId} to ${team} in game ${gameId}`);\r\n      \r\n      // Update the URL to match your backend route without the /api prefix\r\n      const response = await axios.post(`${API_URL}/game/change-team`, {\r\n        game_id: gameId,\r\n        player_id: playerId,\r\n        team: team\r\n      });\r\n      \r\n      console.log(\"Change team response:\", response.data);\r\n      \r\n      if (!response.data || !response.data.id) {\r\n        console.error(\"Invalid game response:\", response.data);\r\n        setError(\"Server returned an invalid game. Please try again.\");\r\n        return null;\r\n      }\r\n      \r\n      const updatedGame = response.data;\r\n      setGame(updatedGame);\r\n      return updatedGame;\r\n    } catch (err) {\r\n      console.error('Error changing team:', err);\r\n      if (err.response) {\r\n        console.error('Error response:', {\r\n          status: err.response.status,\r\n          headers: err.response.headers,\r\n          data: err.response.data\r\n        });\r\n      }\r\n      setError(err.response?.data?.message || 'Failed to change team. Please try again.');\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  // Update the provider value with all functions\r\n  return (\r\n    <GameContext.Provider \r\n      value={{ \r\n        game, \r\n        error, \r\n        startNewGame, \r\n        joinExistingGame,\r\n        getGameState, \r\n        revealCard, \r\n        setSpymaster, \r\n        endTurn,\r\n        changeTeam\r\n      }}\r\n    >\r\n      {children}\r\n    </GameContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}